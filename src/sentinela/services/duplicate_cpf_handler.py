"""
DuplicateCPFHandler - Servi√ßo para tratamento de CPF duplicado

Este servi√ßo gerencia todo o fluxo de detec√ß√£o e resolu√ß√£o de conflitos
quando um CPF j√° est√° sendo usado por outro usu√°rio do Telegram.
"""

import logging
from typing import Dict, Optional, Tuple
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.error import TelegramError

from src.sentinela.core.config import TELEGRAM_TOKEN, TELEGRAM_GROUP_ID
from src.sentinela.clients.db_client import get_user_by_cpf, save_user_data, get_db_connection
from src.sentinela.services.group_service import remove_user_from_group
from src.sentinela.services.cpf_validation_service import CPFValidationService

logger = logging.getLogger(__name__)

class DuplicateCPFHandler:
    """Gerenciador de conflitos de CPF duplicado"""

    def __init__(self):
        self._pending_confirmations = {}  # Cache de confirma√ß√µes pendentes

    def detect_duplicate_cpf(self, cpf: str, current_user_id: int) -> Optional[Dict]:
        """
        Detecta se um CPF j√° est√° em uso por outro usu√°rio

        Args:
            cpf: CPF a ser verificado
            current_user_id: ID do usu√°rio atual

        Returns:
            Optional[Dict]: Dados do usu√°rio que j√° usa o CPF, ou None se n√£o h√° conflito
        """
        clean_cpf = CPFValidationService.clean_cpf(cpf)
        existing_user = get_user_by_cpf(clean_cpf)

        if existing_user and existing_user['user_id'] != current_user_id:
            logger.warning(
                f"CPF duplicado detectado: {CPFValidationService.mask_cpf(clean_cpf)} "
                f"j√° usado por user_id {existing_user['user_id']}, "
                f"novo usu√°rio: {current_user_id}"
            )
            return existing_user

        return None

    async def handle_duplicate_cpf_conflict(
        self,
        cpf: str,
        new_user_id: int,
        new_username: str,
        existing_user: Dict
    ) -> Dict:
        """
        Inicia o processo de resolu√ß√£o de conflito de CPF duplicado

        Args:
            cpf: CPF em conflito
            new_user_id: ID do novo usu√°rio
            new_username: Username do novo usu√°rio
            existing_user: Dados do usu√°rio existente

        Returns:
            Dict: Resultado da opera√ß√£o
        """
        try:
            # Cria entrada de confirma√ß√£o pendente
            confirmation_id = f"{new_user_id}_{existing_user['user_id']}_{int(datetime.now().timestamp())}"

            self._pending_confirmations[confirmation_id] = {
                'cpf': cpf,
                'new_user_id': new_user_id,
                'new_username': new_username,
                'existing_user': existing_user,
                'created_at': datetime.now(),
                'expires_at': datetime.now() + timedelta(minutes=10)  # 10 minutos para decidir
            }

            # Envia mensagem de confirma√ß√£o
            await self._send_duplicate_cpf_confirmation(confirmation_id)

            return {
                'success': False,
                'reason': 'duplicate_cpf_confirmation_sent',
                'message': (
                    f"üîÑ <b>CPF j√° est√° em uso</b>\n\n"
                    f"O CPF <code>{CPFValidationService.mask_cpf(cpf)}</code> j√° est√° "
                    f"vinculado √† conta de <b>{existing_user['client_name']}</b>.\n\n"
                    f"üì± <b>Verifique suas mensagens privadas</b> para escolher qual "
                    f"conta deve ficar vinculada a este CPF.\n\n"
                    f"‚è∞ Voc√™ tem <b>10 minutos</b> para decidir."
                ),
                'confirmation_id': confirmation_id
            }

        except Exception as e:
            logger.error(f"Erro ao lidar com CPF duplicado: {e}")
            return {
                'success': False,
                'reason': 'duplicate_cpf_error',
                'message': "‚ùå Erro interno ao processar CPF duplicado. Tente novamente."
            }

    async def _send_duplicate_cpf_confirmation(self, confirmation_id: str):
        """Envia mensagem de confirma√ß√£o para escolha da conta"""
        confirmation = self._pending_confirmations.get(confirmation_id)
        if not confirmation:
            return

        new_user_id = confirmation['new_user_id']
        existing_user = confirmation['existing_user']
        cpf_masked = CPFValidationService.mask_cpf(confirmation['cpf'])

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(
                    "üîÑ Usar esta conta (atual)",
                    callback_data=f"cpf_duplicate_keep_new_{confirmation_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    f"üì± Manter conta anterior ({existing_user['client_name']})",
                    callback_data=f"cpf_duplicate_keep_old_{confirmation_id}"
                )
            ],
            [
                InlineKeyboardButton(
                    "‚ùå Cancelar",
                    callback_data=f"cpf_duplicate_cancel_{confirmation_id}"
                )
            ]
        ])

        message = (
            f"üîÑ <b>Conflito de CPF Detectado</b>\n\n"
            f"O CPF <code>{cpf_masked}</code> j√° est√° sendo usado por:\n"
            f"üë§ <b>{existing_user['client_name']}</b>\n\n"
            f"<b>Qual conta deve ficar vinculada a este CPF?</b>\n\n"
            f"üîÑ <b>Esta conta:</b> Sua conta atual ser√° vinculada ao CPF "
            f"e a conta anterior ser√° removida do grupo.\n\n"
            f"üì± <b>Conta anterior:</b> Mant√©m a vincula√ß√£o existente "
            f"e sua solicita√ß√£o ser√° cancelada.\n\n"
            f"‚è∞ <i>Esta decis√£o expira em 10 minutos.</i>"
        )

        try:
            bot = Bot(token=TELEGRAM_TOKEN)
            await bot.send_message(
                chat_id=new_user_id,
                text=message,
                parse_mode='HTML',
                reply_markup=keyboard
            )
            logger.info(f"Mensagem de confirma√ß√£o de CPF duplicado enviada para {new_user_id}")

        except TelegramError as e:
            logger.error(f"Erro ao enviar mensagem de confirma√ß√£o: {e}")
            # Remove da lista de pendentes se n√£o conseguiu enviar
            self._pending_confirmations.pop(confirmation_id, None)

    async def process_duplicate_cpf_decision(self, confirmation_id: str, decision: str) -> Dict:
        """
        Processa a decis√£o do usu√°rio sobre o CPF duplicado

        Args:
            confirmation_id: ID da confirma√ß√£o
            decision: Decis√£o ('keep_new', 'keep_old', 'cancel')

        Returns:
            Dict: Resultado da opera√ß√£o
        """
        confirmation = self._pending_confirmations.get(confirmation_id)
        if not confirmation:
            return {
                'success': False,
                'message': "‚ùå Confirma√ß√£o n√£o encontrada ou expirada."
            }

        # Verifica se n√£o expirou
        if datetime.now() > confirmation['expires_at']:
            self._pending_confirmations.pop(confirmation_id, None)
            return {
                'success': False,
                'message': "‚è∞ Tempo esgotado para decis√£o. Tente o processo novamente."
            }

        try:
            if decision == 'keep_new':
                return await self._handle_keep_new_account(confirmation)
            elif decision == 'keep_old':
                return await self._handle_keep_old_account(confirmation)
            elif decision == 'cancel':
                return await self._handle_cancel_decision(confirmation)
            else:
                return {
                    'success': False,
                    'message': "‚ùå Decis√£o inv√°lida."
                }

        except Exception as e:
            logger.error(f"Erro ao processar decis√£o de CPF duplicado: {e}")
            return {
                'success': False,
                'message': "‚ùå Erro interno ao processar decis√£o. Tente novamente."
            }
        finally:
            # Remove da lista de pendentes
            self._pending_confirmations.pop(confirmation_id, None)

    async def _handle_keep_new_account(self, confirmation: Dict) -> Dict:
        """Processa decis√£o de manter a nova conta"""
        new_user_id = confirmation['new_user_id']
        new_username = confirmation['new_username']
        existing_user = confirmation['existing_user']
        cpf = confirmation['cpf']

        logger.info(
            f"Processando troca de CPF: removendo user_id {existing_user['user_id']} "
            f"e vinculando ao user_id {new_user_id}"
        )

        try:
            # Remove usu√°rio antigo do grupo
            removal_success = await remove_user_from_group(
                existing_user['user_id'],
                f"CPF {CPFValidationService.mask_cpf(cpf)} transferido para nova conta"
            )

            if removal_success:
                logger.info(f"Usu√°rio {existing_user['user_id']} removido do grupo com sucesso")
            else:
                logger.warning(f"Falha ao remover usu√°rio {existing_user['user_id']} do grupo")

            # Atualiza o mapeamento no banco de dados
            # Note: Precisa dos dados do cliente da API para salvar completo
            from src.sentinela.integrations.hubsoft.cliente import get_client_data

            client_data = get_client_data(cpf)
            if not client_data:
                return {
                    'success': False,
                    'message': "‚ùå Erro ao buscar dados do cliente. CPF pode estar inativo."
                }

            # Salva dados da nova conta
            save_success = save_user_data(new_user_id, new_username, cpf, client_data)

            if save_success:
                return {
                    'success': True,
                    'message': (
                        f"‚úÖ <b>CPF vinculado com sucesso!</b>\n\n"
                        f"üîÑ Sua conta agora est√° vinculada ao CPF "
                        f"<code>{CPFValidationService.mask_cpf(cpf)}</code>.\n\n"
                        f"üì± A conta anterior foi removida do grupo.\n\n"
                        f"üéÆ Voc√™ j√° pode usar todos os recursos do bot!"
                    )
                }
            else:
                return {
                    'success': False,
                    'message': "‚ùå Erro ao salvar novos dados. Tente novamente."
                }

        except Exception as e:
            logger.error(f"Erro ao processar manter nova conta: {e}")
            return {
                'success': False,
                'message': "‚ùå Erro interno durante a troca. Contate o suporte."
            }

    async def _handle_keep_old_account(self, confirmation: Dict) -> Dict:
        """Processa decis√£o de manter a conta antiga"""
        existing_user = confirmation['existing_user']
        cpf = confirmation['cpf']

        logger.info(f"Usu√°rio optou por manter conta existente para CPF {CPFValidationService.mask_cpf(cpf)}")

        return {
            'success': False,
            'reason': 'kept_existing_account',
            'message': (
                f"‚úÖ <b>Conta anterior mantida</b>\n\n"
                f"O CPF <code>{CPFValidationService.mask_cpf(cpf)}</code> continua "
                f"vinculado √† conta de <b>{existing_user['client_name']}</b>.\n\n"
                f"‚ùå Sua solicita√ß√£o foi cancelada.\n\n"
                f"üí° Se precisar de ajuda, entre em contato com o suporte."
            )
        }

    async def _handle_cancel_decision(self, confirmation: Dict) -> Dict:
        """Processa cancelamento da decis√£o"""
        cpf = confirmation['cpf']

        logger.info(f"Usu√°rio cancelou decis√£o de CPF duplicado para {CPFValidationService.mask_cpf(cpf)}")

        return {
            'success': False,
            'reason': 'cancelled_by_user',
            'message': (
                f"‚ùå <b>Opera√ß√£o cancelada</b>\n\n"
                f"A verifica√ß√£o do CPF <code>{CPFValidationService.mask_cpf(cpf)}</code> "
                f"foi cancelada.\n\n"
                f"üí° Voc√™ pode tentar novamente a qualquer momento usando /start."
            )
        }

    def cleanup_expired_confirmations(self):
        """Remove confirma√ß√µes expiradas"""
        now = datetime.now()
        expired_ids = [
            conf_id for conf_id, conf in self._pending_confirmations.items()
            if now > conf['expires_at']
        ]

        for conf_id in expired_ids:
            self._pending_confirmations.pop(conf_id, None)
            logger.debug(f"Confirma√ß√£o expirada removida: {conf_id}")

        if expired_ids:
            logger.info(f"Removidas {len(expired_ids)} confirma√ß√µes expiradas")

    def get_pending_confirmation(self, confirmation_id: str) -> Optional[Dict]:
        """Retorna dados de uma confirma√ß√£o pendente"""
        return self._pending_confirmations.get(confirmation_id)

    def get_stats(self) -> Dict:
        """Retorna estat√≠sticas do handler"""
        now = datetime.now()
        active_confirmations = sum(
            1 for conf in self._pending_confirmations.values()
            if now <= conf['expires_at']
        )

        return {
            'total_pending': len(self._pending_confirmations),
            'active_confirmations': active_confirmations,
            'expired_confirmations': len(self._pending_confirmations) - active_confirmations
        }


# Inst√¢ncia global do handler
duplicate_cpf_handler = DuplicateCPFHandler()