"""
Event Handlers para eventos relacionados a conversas de suporte.

Processa eventos de dom√≠nio para implementar funcionalidades
como limpeza autom√°tica, m√©tricas de UX e otimiza√ß√£o de fluxos.
"""

import asyncio
import logging
from typing import Type

from ..event_bus import EventHandler, DomainEvent
from ....domain.events.conversation_events import (
    ConversationStarted,
    ConversationCompleted,
    ConversationCancelled
)

logger = logging.getLogger(__name__)


class ConversationStartedHandler(EventHandler):
    """
    Handler para evento de conversa iniciada.

    Responsabilidades:
    - Log de in√≠cio de conversa
    - Configura√ß√£o de timeout autom√°tico
    - M√©tricas de engajamento
    - Prepara√ß√£o de contexto
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return ConversationStarted

    async def handle(self, event: ConversationStarted) -> None:
        """
        Processa evento de conversa iniciada.

        Args:
            event: Evento de conversa iniciada
        """
        logger.info(
            f"üí¨ CONVERSA INICIADA: {event.conversation_id} "
            f"por usu√°rio {event.username} (ID: {event.user_id}) "
            f"em {event.started_at.strftime('%H:%M:%S')}"
        )

        # Configura timeout autom√°tico
        await self._setup_conversation_timeout(event)

        # Atualiza m√©tricas de engajamento
        await self._update_engagement_metrics(event)

        # Prepara contexto da conversa
        await self._prepare_conversation_context(event)

    async def _setup_conversation_timeout(self, event: ConversationStarted) -> None:
        """
        Configura timeout autom√°tico para a conversa.

        Args:
            event: Evento de conversa iniciada
        """
        try:
            # Em produ√ß√£o, configuraria timer real para cancelar conversa inativa
            logger.debug(
                f"‚è∞ TIMEOUT: Configurado timeout de 30min para conversa {event.conversation_id}"
            )

            # Simula configura√ß√£o de timeout
            await asyncio.sleep(0.05)

        except Exception as e:
            logger.error(f"Erro ao configurar timeout para conversa {event.conversation_id}: {e}")

    async def _update_engagement_metrics(self, event: ConversationStarted) -> None:
        """
        Atualiza m√©tricas de engajamento.

        Args:
            event: Evento de conversa iniciada
        """
        try:
            logger.debug(
                f"üìà ENGAGEMENT: Nova conversa contabilizada "
                f"- Total de sess√µes incrementado"
            )

            # Em produ√ß√£o, atualizaria dashboard de UX metrics

        except Exception as e:
            logger.error(f"Erro ao atualizar m√©tricas para conversa {event.conversation_id}: {e}")

    async def _prepare_conversation_context(self, event: ConversationStarted) -> None:
        """
        Prepara contexto inicial da conversa.

        Args:
            event: Evento de conversa iniciada
        """
        try:
            logger.debug(
                f"üéØ CONTEXTO: Preparando ambiente para {event.username} "
                f"- Hist√≥rico e prefer√™ncias carregados"
            )

            # Em produ√ß√£o, carregaria hist√≥rico de tickets, prefer√™ncias, etc.

        except Exception as e:
            logger.error(f"Erro ao preparar contexto para conversa {event.conversation_id}: {e}")


class ConversationCompletedHandler(EventHandler):
    """
    Handler para evento de conversa completada com sucesso.

    Responsabilidades:
    - Log de sucesso
    - M√©tricas de convers√£o
    - An√°lise de performance do fluxo
    - Prepara√ß√£o para feedback
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return ConversationCompleted

    async def handle(self, event: ConversationCompleted) -> None:
        """
        Processa evento de conversa completada.

        Args:
            event: Evento de conversa completada
        """
        # Calcula dura√ß√£o da conversa
        duration_seconds = (event.completed_at - event.started_at).total_seconds()
        duration_str = f"{int(duration_seconds//60)}m{int(duration_seconds%60):02d}s"

        logger.info(
            f"‚úÖ CONVERSA COMPLETADA: {event.conversation_id} "
            f"por {event.username} - Dura√ß√£o: {duration_str} "
            f"- Ticket criado: {event.ticket_id}"
        )

        # Atualiza m√©tricas de convers√£o
        await self._update_conversion_metrics(event, duration_seconds)

        # An√°lise de performance do fluxo
        await self._analyze_flow_performance(event, duration_seconds)

        # Prepara feedback autom√°tico
        await self._prepare_feedback_request(event)

        # Limpeza de dados tempor√°rios
        await self._cleanup_conversation_data(event)

    async def _update_conversion_metrics(self, event: ConversationCompleted, duration_seconds: float) -> None:
        """
        Atualiza m√©tricas de convers√£o.

        Args:
            event: Evento de conversa completada
            duration_seconds: Dura√ß√£o da conversa em segundos
        """
        try:
            logger.debug(
                f"üìä CONVERS√ÉO: Conversa bem-sucedida registrada "
                f"- Taxa de convers√£o atualizada - Dura√ß√£o: {duration_seconds:.1f}s"
            )

            # Em produ√ß√£o, atualizaria m√©tricas de UX e convers√£o

        except Exception as e:
            logger.error(f"Erro ao atualizar m√©tricas de convers√£o para conversa {event.conversation_id}: {e}")

    async def _analyze_flow_performance(self, event: ConversationCompleted, duration_seconds: float) -> None:
        """
        Analisa performance do fluxo conversacional.

        Args:
            event: Evento de conversa completada
            duration_seconds: Dura√ß√£o da conversa em segundos
        """
        try:
            # Classifica performance baseada na dura√ß√£o
            if duration_seconds < 120:  # < 2 minutos
                performance = "EXCELENTE"
            elif duration_seconds < 300:  # < 5 minutos
                performance = "BOM"
            elif duration_seconds < 600:  # < 10 minutos
                performance = "ACEIT√ÅVEL"
            else:
                performance = "LENTO"

            logger.debug(
                f"‚ö° PERFORMANCE: Fluxo {performance} "
                f"({duration_seconds:.1f}s) para conversa {event.conversation_id}"
            )

            # Em produ√ß√£o, usaria para otimizar UX

        except Exception as e:
            logger.error(f"Erro na an√°lise de performance para conversa {event.conversation_id}: {e}")

    async def _prepare_feedback_request(self, event: ConversationCompleted) -> None:
        """
        Prepara solicita√ß√£o de feedback autom√°tica.

        Args:
            event: Evento de conversa completada
        """
        try:
            logger.debug(
                f"üí≠ FEEDBACK: Preparando solicita√ß√£o de feedback "
                f"para usu√°rio {event.username} em 24h"
            )

            # Em produ√ß√£o, agendaria mensagem de feedback

        except Exception as e:
            logger.error(f"Erro ao preparar feedback para conversa {event.conversation_id}: {e}")

    async def _cleanup_conversation_data(self, event: ConversationCompleted) -> None:
        """
        Limpa dados tempor√°rios da conversa.

        Args:
            event: Evento de conversa completada
        """
        try:
            logger.debug(
                f"üßπ CLEANUP: Limpando dados tempor√°rios da conversa {event.conversation_id}"
            )

            # Em produ√ß√£o, removeria cache, sess√µes tempor√°rias, etc.

        except Exception as e:
            logger.error(f"Erro na limpeza para conversa {event.conversation_id}: {e}")


class ConversationCancelledHandler(EventHandler):
    """
    Handler para evento de conversa cancelada.

    Responsabilidades:
    - Log de cancelamento
    - An√°lise de abandono
    - M√©tricas de UX
    - Limpeza de recursos
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return ConversationCancelled

    async def handle(self, event: ConversationCancelled) -> None:
        """
        Processa evento de conversa cancelada.

        Args:
            event: Evento de conversa cancelada
        """
        # Calcula dura√ß√£o antes do cancelamento
        duration_seconds = (event.cancelled_at - event.started_at).total_seconds()
        duration_str = f"{int(duration_seconds//60)}m{int(duration_seconds%60):02d}s"

        logger.warning(
            f"‚ùå CONVERSA CANCELADA: {event.conversation_id} "
            f"por {event.username} - Motivo: {event.reason} "
            f"- Dura√ß√£o antes do cancelamento: {duration_str} "
            f"- Step: {event.step}"
        )

        # An√°lise de abandono
        await self._analyze_abandonment(event, duration_seconds)

        # Atualiza m√©tricas de UX
        await self._update_ux_metrics(event)

        # Limpeza de recursos
        await self._cleanup_cancelled_conversation(event)

        # Poss√≠vel reengajamento
        await self._consider_reengagement(event)

    async def _analyze_abandonment(self, event: ConversationCancelled, duration_seconds: float) -> None:
        """
        Analisa padr√µes de abandono para otimiza√ß√£o.

        Args:
            event: Evento de conversa cancelada
            duration_seconds: Dura√ß√£o antes do cancelamento
        """
        try:
            # Identifica ponto cr√≠tico de abandono
            critical_steps = {
                "CATEGORY_SELECTION": "Categoria complexa demais?",
                "GAME_SELECTION": "Muitas op√ß√µes de jogos?",
                "DESCRIPTION_INPUT": "Campo de descri√ß√£o intimidante?",
                "ATTACHMENTS_OPTIONAL": "Processo de upload confuso?"
            }

            insight = critical_steps.get(event.step, "Abandono em passo n√£o cr√≠tico")

            logger.info(
                f"üîç ABANDONO: Step '{event.step}' ap√≥s {duration_seconds:.1f}s "
                f"- Insight: {insight}"
            )

            # Em produ√ß√£o, usaria para otimizar UX nos pontos cr√≠ticos

        except Exception as e:
            logger.error(f"Erro na an√°lise de abandono para conversa {event.conversation_id}: {e}")

    async def _update_ux_metrics(self, event: ConversationCancelled) -> None:
        """
        Atualiza m√©tricas de experi√™ncia do usu√°rio.

        Args:
            event: Evento de conversa cancelada
        """
        try:
            logger.debug(
                f"üìâ UX METRICS: Abandono registrado em '{event.step}' "
                f"- Taxa de abandono atualizada"
            )

            # Em produ√ß√£o, atualizaria dashboard de UX

        except Exception as e:
            logger.error(f"Erro ao atualizar UX metrics para conversa {event.conversation_id}: {e}")

    async def _cleanup_cancelled_conversation(self, event: ConversationCancelled) -> None:
        """
        Limpa recursos da conversa cancelada.

        Args:
            event: Evento de conversa cancelada
        """
        try:
            logger.debug(
                f"üßπ CLEANUP: Limpando recursos da conversa cancelada {event.conversation_id}"
            )

            # Em produ√ß√£o, removeria locks, cache, timers, etc.

        except Exception as e:
            logger.error(f"Erro na limpeza de conversa cancelada {event.conversation_id}: {e}")

    async def _consider_reengagement(self, event: ConversationCancelled) -> None:
        """
        Considera estrat√©gia de reengajamento.

        Args:
            event: Evento de conversa cancelada
        """
        try:
            # Se cancelamento foi por timeout ou abandono, considera reengajamento
            if event.reason in ("timeout", "abandonment"):
                logger.info(
                    f"üéØ REENGAGEMENT: Usu√°rio {event.username} eleg√≠vel "
                    f"para campanha de reengajamento (abandono em '{event.step}')"
                )

                # Em produ√ß√£o, adicionaria √† campanha de reengajamento

        except Exception as e:
            logger.error(f"Erro ao considerar reengajamento para conversa {event.conversation_id}: {e}")


class ConversationFlowAnalyticsHandler(EventHandler):
    """
    Handler global para analytics de fluxo conversacional.

    Responsabilidades:
    - An√°lise detalhada de fluxos
    - Identifica√ß√£o de gargalos
    - Otimiza√ß√£o autom√°tica
    - A/B testing insights
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        # Handler global para eventos de conversa
        return DomainEvent

    async def handle(self, event: DomainEvent) -> None:
        """
        Processa eventos de conversa para analytics.

        Args:
            event: Qualquer evento de dom√≠nio
        """
        # S√≥ processa eventos de conversa
        if not event.__class__.__name__.startswith('Conversation'):
            return

        logger.debug(
            f"üìä FLOW ANALYTICS: {event.__class__.__name__} "
            f"processado para an√°lise de fluxo"
        )

        # Em produ√ß√£o, alimentaria sistema de analytics avan√ßado
        await self._save_flow_analytics(event)

    async def _save_flow_analytics(self, event: DomainEvent) -> None:
        """
        Salva dados para an√°lise de fluxo.

        Args:
            event: Evento de conversa
        """
        try:
            # Em produ√ß√£o, salvaria em data warehouse para an√°lises avan√ßadas
            logger.debug(f"üíæ FLOW DATA: {event.__class__.__name__} registrado para analytics")

        except Exception as e:
            logger.error(f"Erro ao salvar flow analytics: {e}")