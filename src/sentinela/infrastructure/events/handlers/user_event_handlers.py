"""
Event Handlers para eventos relacionados a usu√°rios.

Processa eventos de dom√≠nio para implementar funcionalidades
como welcome messages, estat√≠sticas e compliance.
"""

import asyncio
import logging
from typing import Type

from ..event_bus import EventHandler, DomainEvent
from ....domain.events.user_events import (
    UserRegistered,
    UserBanned,
    UserUnbanned,
    CPFValidated
)

logger = logging.getLogger(__name__)


class UserRegisteredHandler(EventHandler):
    """
    Handler para evento de usu√°rio registrado.

    Responsabilidades:
    - Mensagem de boas-vindas
    - Configura√ß√£o inicial do usu√°rio
    - Log de novos registros
    - M√©tricas de crescimento
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return UserRegistered

    async def handle(self, event: UserRegistered) -> None:
        """
        Processa evento de usu√°rio registrado.

        Args:
            event: Evento de usu√°rio registrado
        """
        logger.info(
            f"üéâ NOVO USU√ÅRIO: {event.username} (ID: {event.user_id}) "
            f"registrado em {event.registration_date.strftime('%d/%m/%Y %H:%M')}"
        )

        # Envia mensagem de boas-vindas
        await self._send_welcome_message(event)

        # Configura perfil inicial
        await self._setup_initial_profile(event)

        # Atualiza m√©tricas
        await self._update_growth_metrics(event)

    async def _send_welcome_message(self, event: UserRegistered) -> None:
        """
        Envia mensagem de boas-vindas para novo usu√°rio.

        Args:
            event: Evento de usu√°rio registrado
        """
        try:
            welcome_msg = (
                f"üéÆ Bem-vindo √† OnCabo Gaming, {event.username}!\n\n"
                f"üöÄ Seu cadastro foi realizado com sucesso!\n"
                f"üìû Use /suporte para abrir tickets de atendimento\n"
                f"üìä Use /status para verificar conex√£o\n\n"
                f"üéØ Estamos aqui para oferecer a melhor experi√™ncia gaming!"
            )

            logger.info(
                f"üí¨ WELCOME: Mensagem de boas-vindas enviada para {event.username}"
            )

            # Simula envio da mensagem
            await asyncio.sleep(0.1)

        except Exception as e:
            logger.error(f"Erro ao enviar welcome message para usu√°rio {event.user_id}: {e}")

    async def _setup_initial_profile(self, event: UserRegistered) -> None:
        """
        Configura perfil inicial do usu√°rio.

        Args:
            event: Evento de usu√°rio registrado
        """
        try:
            logger.debug(
                f"‚öôÔ∏è SETUP: Configurando perfil inicial para {event.username}"
            )

            # Em produ√ß√£o, configuraria prefer√™ncias padr√£o, etc.

        except Exception as e:
            logger.error(f"Erro ao configurar perfil para usu√°rio {event.user_id}: {e}")

    async def _update_growth_metrics(self, event: UserRegistered) -> None:
        """
        Atualiza m√©tricas de crescimento.

        Args:
            event: Evento de usu√°rio registrado
        """
        try:
            logger.debug(
                f"üìà M√âTRICAS: Novo registro contabilizado - "
                f"Total de usu√°rios incrementado"
            )

            # Em produ√ß√£o, atualizaria dashboard de m√©tricas

        except Exception as e:
            logger.error(f"Erro ao atualizar m√©tricas para usu√°rio {event.user_id}: {e}")


class UserBannedHandler(EventHandler):
    """
    Handler para evento de usu√°rio banido.

    Responsabilidades:
    - Log de seguran√ßa
    - Notifica√ß√£o para administradores
    - Limpeza de sess√µes ativas
    - Auditoria de compliance
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return UserBanned

    async def handle(self, event: UserBanned) -> None:
        """
        Processa evento de usu√°rio banido.

        Args:
            event: Evento de usu√°rio banido
        """
        logger.warning(
            f"üö´ USU√ÅRIO BANIDO: {event.username} (ID: {event.user_id}) "
            f"- Motivo: {event.reason} - Admin: {event.banned_by}"
        )

        # Notifica administradores
        await self._notify_admins_ban(event)

        # Limpa sess√µes ativas
        await self._cleanup_user_sessions(event)

        # Log de seguran√ßa
        await self._security_audit_log(event)

    async def _notify_admins_ban(self, event: UserBanned) -> None:
        """
        Notifica administradores sobre banimento.

        Args:
            event: Evento de usu√°rio banido
        """
        try:
            logger.info(
                f"üì¢ ADMIN ALERT: Usu√°rio {event.username} banido "
                f"por {event.banned_by} - Motivo: {event.reason}"
            )

            # Em produ√ß√£o, enviaria notifica√ß√£o para canal de admins

        except Exception as e:
            logger.error(f"Erro ao notificar admins sobre ban de usu√°rio {event.user_id}: {e}")

    async def _cleanup_user_sessions(self, event: UserBanned) -> None:
        """
        Limpa sess√µes ativas do usu√°rio banido.

        Args:
            event: Evento de usu√°rio banido
        """
        try:
            logger.debug(
                f"üßπ CLEANUP: Limpando sess√µes ativas para {event.username}"
            )

            # Em produ√ß√£o, removeria conversations ativas, cache, etc.

        except Exception as e:
            logger.error(f"Erro ao limpar sess√µes para usu√°rio {event.user_id}: {e}")

    async def _security_audit_log(self, event: UserBanned) -> None:
        """
        Registra evento para auditoria de seguran√ßa.

        Args:
            event: Evento de usu√°rio banido
        """
        try:
            logger.info(
                f"üîí SECURITY AUDIT: Ban registrado - "
                f"User: {event.user_id}, Admin: {event.banned_by}, "
                f"Timestamp: {event.ban_date.isoformat()}"
            )

            # Em produ√ß√£o, salvaria em sistema de auditoria de seguran√ßa

        except Exception as e:
            logger.error(f"Erro no security audit para usu√°rio {event.user_id}: {e}")


class UserUnbannedHandler(EventHandler):
    """
    Handler para evento de usu√°rio desbanido.

    Responsabilidades:
    - Restaura√ß√£o de acesso
    - Notifica√ß√£o de reativa√ß√£o
    - Log de auditoria
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return UserUnbanned

    async def handle(self, event: UserUnbanned) -> None:
        """
        Processa evento de usu√°rio desbanido.

        Args:
            event: Evento de usu√°rio desbanido
        """
        logger.info(
            f"‚úÖ USU√ÅRIO DESBANIDO: {event.username} (ID: {event.user_id}) "
            f"reativado por {event.unbanned_by}"
        )

        # Restaura acesso do usu√°rio
        await self._restore_user_access(event)

        # Envia notifica√ß√£o de reativa√ß√£o
        await self._send_reactivation_notice(event)

        # Log de auditoria
        await self._audit_unban(event)

    async def _restore_user_access(self, event: UserUnbanned) -> None:
        """
        Restaura acesso completo do usu√°rio.

        Args:
            event: Evento de usu√°rio desbanido
        """
        try:
            logger.debug(
                f"üîì ACESSO RESTAURADO: {event.username} pode usar o sistema novamente"
            )

            # Em produ√ß√£o, removeria restri√ß√µes, restauraria permiss√µes, etc.

        except Exception as e:
            logger.error(f"Erro ao restaurar acesso para usu√°rio {event.user_id}: {e}")

    async def _send_reactivation_notice(self, event: UserUnbanned) -> None:
        """
        Envia notifica√ß√£o de reativa√ß√£o.

        Args:
            event: Evento de usu√°rio desbanido
        """
        try:
            reactivation_msg = (
                f"üéâ Ol√° {event.username}!\n\n"
                f"‚úÖ Seu acesso foi reativado!\n"
                f"üéÆ Voc√™ pode voltar a usar todos os servi√ßos OnCabo Gaming.\n\n"
                f"üìû Em caso de d√∫vidas, use /suporte"
            )

            logger.info(
                f"üí¨ REATIVA√á√ÉO: Notifica√ß√£o enviada para {event.username}"
            )

        except Exception as e:
            logger.error(f"Erro ao enviar notifica√ß√£o de reativa√ß√£o para usu√°rio {event.user_id}: {e}")

    async def _audit_unban(self, event: UserUnbanned) -> None:
        """
        Registra unban para auditoria.

        Args:
            event: Evento de usu√°rio desbanido
        """
        try:
            logger.info(
                f"üìã AUDIT: Unban registrado - "
                f"User: {event.user_id}, Admin: {event.unbanned_by}, "
                f"Timestamp: {event.unban_date.isoformat()}"
            )

        except Exception as e:
            logger.error(f"Erro no audit de unban para usu√°rio {event.user_id}: {e}")


class CPFValidatedHandler(EventHandler):
    """
    Handler para evento de CPF validado.

    Responsabilidades:
    - Log de compliance
    - Ativa√ß√£o de funcionalidades premium
    - M√©tricas de verifica√ß√£o
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return CPFValidated

    async def handle(self, event: CPFValidated) -> None:
        """
        Processa evento de CPF validado.

        Args:
            event: Evento de CPF validado
        """
        # CPF mascarado para logs (LGPD compliance)
        masked_cpf = f"***.***.***-{event.cpf_number[-2:]}"

        logger.info(
            f"‚úÖ CPF VALIDADO: Usu√°rio {event.username} (ID: {event.user_id}) "
            f"- CPF: {masked_cpf} - V√°lido: {event.is_valid}"
        )

        if event.is_valid:
            await self._handle_valid_cpf(event)
        else:
            await self._handle_invalid_cpf(event)

        # M√©tricas de valida√ß√£o
        await self._update_validation_metrics(event)

    async def _handle_valid_cpf(self, event: CPFValidated) -> None:
        """
        Processa CPF v√°lido.

        Args:
            event: Evento de CPF validado
        """
        try:
            logger.info(
                f"üéâ CPF V√ÅLIDO: Ativando funcionalidades premium para {event.username}"
            )

            # Em produ√ß√£o, ativaria features premium, aumentaria limites, etc.

        except Exception as e:
            logger.error(f"Erro ao processar CPF v√°lido para usu√°rio {event.user_id}: {e}")

    async def _handle_invalid_cpf(self, event: CPFValidated) -> None:
        """
        Processa CPF inv√°lido.

        Args:
            event: Evento de CPF validado
        """
        try:
            logger.warning(
                f"‚ùå CPF INV√ÅLIDO: Mantendo restri√ß√µes para {event.username}"
            )

            # Em produ√ß√£o, manteria limita√ß√µes, enviaria orienta√ß√µes, etc.

        except Exception as e:
            logger.error(f"Erro ao processar CPF inv√°lido para usu√°rio {event.user_id}: {e}")

    async def _update_validation_metrics(self, event: CPFValidated) -> None:
        """
        Atualiza m√©tricas de valida√ß√£o.

        Args:
            event: Evento de CPF validado
        """
        try:
            status = "v√°lido" if event.is_valid else "inv√°lido"
            logger.debug(
                f"üìä M√âTRICAS: Valida√ß√£o de CPF {status} contabilizada"
            )

            # Em produ√ß√£o, atualizaria dashboard de compliance

        except Exception as e:
            logger.error(f"Erro ao atualizar m√©tricas de CPF para usu√°rio {event.user_id}: {e}")


class UserActivityAuditHandler(EventHandler):
    """
    Handler global para auditoria de atividades de usu√°rio.

    Responsabilidades:
    - Log detalhado de compliance
    - M√©tricas de engajamento
    - An√°lise de comportamento
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        # Handler global para todos os eventos
        return DomainEvent

    async def handle(self, event: DomainEvent) -> None:
        """
        Processa qualquer evento para auditoria de usu√°rio.

        Args:
            event: Qualquer evento de dom√≠nio
        """
        # S√≥ processa eventos relacionados a usu√°rios
        if not any(keyword in event.__class__.__name__ for keyword in ['User', 'CPF']):
            return

        logger.debug(
            f"üë§ USER ACTIVITY: {event.__class__.__name__} "
            f"em {event.occurred_at.strftime('%Y-%m-%d %H:%M:%S')}"
        )

        # Em produ√ß√£o, salvaria para an√°lise de comportamento
        await self._save_activity_log(event)

    async def _save_activity_log(self, event: DomainEvent) -> None:
        """
        Salva log de atividade do usu√°rio.

        Args:
            event: Evento a ser registrado
        """
        try:
            # Em produ√ß√£o, salvaria em sistema de analytics
            logger.debug(f"üìä ACTIVITY LOG: {event.__class__.__name__} registrado")

        except Exception as e:
            logger.error(f"Erro ao salvar activity log: {e}")