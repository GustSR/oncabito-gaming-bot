"""
Event Handlers para eventos de verifica√ß√£o de CPF.

Processa eventos de dom√≠nio relacionados √† verifica√ß√£o de CPF
para implementar side effects como notifica√ß√µes e remo√ß√£o de usu√°rios.
"""

import asyncio
import logging
from typing import Type

from ..event_bus import EventHandler, DomainEvent
from ....domain.events.verification_events import (
    VerificationStarted,
    VerificationCompleted,
    VerificationFailed,
    VerificationExpired,
    VerificationCancelled,
    CPFDuplicateDetected,
    CPFRemapped
)

logger = logging.getLogger(__name__)


class VerificationStartedHandler(EventHandler):
    """
    Handler para evento de verifica√ß√£o iniciada.

    Responsabilidades:
    - Enviar solicita√ß√£o de CPF para o usu√°rio
    - Configurar timeout autom√°tico
    - Log de auditoria
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return VerificationStarted

    async def handle(self, event: VerificationStarted) -> None:
        """
        Processa evento de verifica√ß√£o iniciada.

        Args:
            event: Evento de verifica√ß√£o iniciada
        """
        logger.info(
            f"üîç VERIFICA√á√ÉO INICIADA: {event.verification_id} "
            f"para usu√°rio {event.username} (ID: {event.user_id}) "
            f"- Tipo: {event.verification_type}"
        )

        # Envia solicita√ß√£o de CPF
        await self._send_cpf_request(event)

        # Configura notifica√ß√£o de timeout
        await self._schedule_timeout_notification(event)

    async def _send_cpf_request(self, event: VerificationStarted) -> None:
        """
        Envia solicita√ß√£o de CPF para o usu√°rio.

        Args:
            event: Evento de verifica√ß√£o iniciada
        """
        try:
            # Determina contexto da mensagem baseado no tipo
            if event.verification_type == "support_request":
                context = {
                    "title": "üéÆ Verifica√ß√£o necess√°ria para suporte",
                    "purpose": "Para abrir um chamado de suporte",
                    "urgency": "Isso √© necess√°rio para continuar com seu atendimento."
                }
            else:  # auto_checkup
                context = {
                    "title": "üîç Verifica√ß√£o de seguran√ßa necess√°ria",
                    "purpose": "Para manter seu acesso ao grupo",
                    "urgency": "Voc√™ tem 24 horas para confirmar, caso contr√°rio ser√° removido do grupo."
                }

            # Em produ√ß√£o, enviaria via Telegram Bot API
            logger.info(
                f"üì± CPF REQUEST: Solicita√ß√£o enviada para {event.username} "
                f"- Tipo: {event.verification_type}"
            )

            # Simula envio da mensagem
            await asyncio.sleep(0.1)

        except Exception as e:
            logger.error(f"Erro ao enviar solicita√ß√£o de CPF para usu√°rio {event.user_id}: {e}")

    async def _schedule_timeout_notification(self, event: VerificationStarted) -> None:
        """
        Agenda notifica√ß√£o de timeout.

        Args:
            event: Evento de verifica√ß√£o iniciada
        """
        try:
            # Em produ√ß√£o, agendaria job para verificar timeout
            logger.debug(
                f"‚è∞ TIMEOUT SCHEDULED: Agendado para verifica√ß√£o {event.verification_id}"
            )

        except Exception as e:
            logger.error(f"Erro ao agendar timeout para verifica√ß√£o {event.verification_id}: {e}")


class VerificationCompletedHandler(EventHandler):
    """
    Handler para evento de verifica√ß√£o completada.

    Responsabilidades:
    - Notificar usu√°rio sobre sucesso
    - Atualizar dados do usu√°rio no sistema
    - Ativar funcionalidades premium
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return VerificationCompleted

    async def handle(self, event: VerificationCompleted) -> None:
        """
        Processa evento de verifica√ß√£o completada.

        Args:
            event: Evento de verifica√ß√£o completada
        """
        cpf_masked = f"***.***.***-{event.cpf_number[-2:]}"

        logger.info(
            f"‚úÖ VERIFICA√á√ÉO COMPLETADA: {event.verification_id} "
            f"para usu√°rio {event.username} (ID: {event.user_id}) "
            f"- CPF: {cpf_masked} - Tipo: {event.verification_type}"
        )

        # Notifica usu√°rio sobre sucesso
        await self._notify_verification_success(event)

        # Ativa funcionalidades premium
        await self._activate_premium_features(event)

        # Atualiza m√©tricas de sucesso
        await self._update_success_metrics(event)

    async def _notify_verification_success(self, event: VerificationCompleted) -> None:
        """
        Notifica usu√°rio sobre verifica√ß√£o bem-sucedida.

        Args:
            event: Evento de verifica√ß√£o completada
        """
        try:
            if event.verification_type == "support_request":
                message_type = "üéÆ Agora voc√™ pode usar o /suporte normalmente!"
            else:  # auto_checkup
                message_type = "üõ°Ô∏è Seu acesso ao grupo foi confirmado!"

            logger.info(
                f"üí¨ SUCCESS NOTIFICATION: Enviada para {event.username} "
                f"- {message_type}"
            )

            # Em produ√ß√£o, enviaria notifica√ß√£o real
            await asyncio.sleep(0.1)

        except Exception as e:
            logger.error(f"Erro ao notificar sucesso para usu√°rio {event.user_id}: {e}")

    async def _activate_premium_features(self, event: VerificationCompleted) -> None:
        """
        Ativa funcionalidades premium para usu√°rio verificado.

        Args:
            event: Evento de verifica√ß√£o completada
        """
        try:
            logger.info(
                f"üéâ PREMIUM FEATURES: Ativadas para {event.username} "
                f"ap√≥s verifica√ß√£o bem-sucedida"
            )

            # Em produ√ß√£o, ativaria features premium reais

        except Exception as e:
            logger.error(f"Erro ao ativar features premium para usu√°rio {event.user_id}: {e}")

    async def _update_success_metrics(self, event: VerificationCompleted) -> None:
        """
        Atualiza m√©tricas de sucesso.

        Args:
            event: Evento de verifica√ß√£o completada
        """
        try:
            logger.debug(
                f"üìä SUCCESS METRICS: Verifica√ß√£o bem-sucedida contabilizada "
                f"- Tipo: {event.verification_type}"
            )

        except Exception as e:
            logger.error(f"Erro ao atualizar m√©tricas de sucesso: {e}")


class VerificationFailedHandler(EventHandler):
    """
    Handler para evento de verifica√ß√£o falhada.

    Responsabilidades:
    - Notificar usu√°rio sobre falha
    - Sugerir pr√≥ximos passos
    - An√°lise de falhas para melhoria
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return VerificationFailed

    async def handle(self, event: VerificationFailed) -> None:
        """
        Processa evento de verifica√ß√£o falhada.

        Args:
            event: Evento de verifica√ß√£o falhada
        """
        logger.warning(
            f"‚ùå VERIFICA√á√ÉO FALHADA: {event.verification_id} "
            f"para usu√°rio {event.username} (ID: {event.user_id}) "
            f"- Motivo: {event.reason} - Tentativas: {event.attempt_count}"
        )

        # Notifica usu√°rio sobre falha
        await self._notify_verification_failure(event)

        # Analisa padr√£o de falhas
        await self._analyze_failure_pattern(event)

    async def _notify_verification_failure(self, event: VerificationFailed) -> None:
        """
        Notifica usu√°rio sobre verifica√ß√£o falhada.

        Args:
            event: Evento de verifica√ß√£o falhada
        """
        try:
            # Determina mensagem baseada no motivo
            if "many_attempts" in event.reason.lower():
                guidance = "Entre em contato com nosso suporte se precisar de ajuda"
            elif "expired" in event.reason.lower():
                guidance = "Voc√™ pode iniciar uma nova verifica√ß√£o"
            else:
                guidance = "Verifique seus dados e tente novamente"

            logger.info(
                f"üí¨ FAILURE NOTIFICATION: Enviada para {event.username} "
                f"- Motivo: {event.reason} - Orienta√ß√£o: {guidance}"
            )

            # Em produ√ß√£o, enviaria notifica√ß√£o real
            await asyncio.sleep(0.1)

        except Exception as e:
            logger.error(f"Erro ao notificar falha para usu√°rio {event.user_id}: {e}")

    async def _analyze_failure_pattern(self, event: VerificationFailed) -> None:
        """
        Analisa padr√£o de falhas para melhoria do sistema.

        Args:
            event: Evento de verifica√ß√£o falhada
        """
        try:
            logger.debug(
                f"üîç FAILURE ANALYSIS: Falha registrada - "
                f"Motivo: {event.reason} - Tipo: {event.verification_type}"
            )

            # Em produ√ß√£o, alimentaria sistema de analytics

        except Exception as e:
            logger.error(f"Erro na an√°lise de falha: {e}")


class VerificationExpiredHandler(EventHandler):
    """
    Handler para evento de verifica√ß√£o expirada.

    Responsabilidades:
    - Remover usu√°rio do grupo (se aplic√°vel)
    - Notificar sobre expira√ß√£o
    - Limpeza de recursos
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return VerificationExpired

    async def handle(self, event: VerificationExpired) -> None:
        """
        Processa evento de verifica√ß√£o expirada.

        Args:
            event: Evento de verifica√ß√£o expirada
        """
        logger.warning(
            f"‚è∞ VERIFICA√á√ÉO EXPIRADA: {event.verification_id} "
            f"para usu√°rio {event.username} (ID: {event.user_id}) "
            f"- Tipo: {event.verification_type}"
        )

        # Remove do grupo se foi checkup de seguran√ßa
        if event.verification_type == "auto_checkup":
            await self._remove_user_from_group(event)

        # Notifica sobre expira√ß√£o
        await self._notify_verification_expired(event)

        # Limpa recursos relacionados
        await self._cleanup_expired_verification(event)

    async def _remove_user_from_group(self, event: VerificationExpired) -> None:
        """
        Remove usu√°rio do grupo por verifica√ß√£o expirada.

        Args:
            event: Evento de verifica√ß√£o expirada
        """
        try:
            logger.info(
                f"üö´ GROUP REMOVAL: Removendo {event.username} por verifica√ß√£o expirada"
            )

            # Em produ√ß√£o, chamaria API do Telegram para remover usu√°rio
            await asyncio.sleep(0.1)

        except Exception as e:
            logger.error(f"Erro ao remover usu√°rio {event.user_id} do grupo: {e}")

    async def _notify_verification_expired(self, event: VerificationExpired) -> None:
        """
        Notifica usu√°rio sobre expira√ß√£o.

        Args:
            event: Evento de verifica√ß√£o expirada
        """
        try:
            if event.verification_type == "support_request":
                message = "‚è∞ Verifica√ß√£o expirada - Digite /suporte novamente para continuar"
            else:  # auto_checkup
                message = "‚è∞ Verifica√ß√£o expirada - Voc√™ foi removido do grupo"

            logger.info(
                f"üí¨ EXPIRY NOTIFICATION: Enviada para {event.username} - {message}"
            )

            # Em produ√ß√£o, enviaria notifica√ß√£o real
            await asyncio.sleep(0.1)

        except Exception as e:
            logger.error(f"Erro ao notificar expira√ß√£o para usu√°rio {event.user_id}: {e}")

    async def _cleanup_expired_verification(self, event: VerificationExpired) -> None:
        """
        Limpa recursos da verifica√ß√£o expirada.

        Args:
            event: Evento de verifica√ß√£o expirada
        """
        try:
            logger.debug(
                f"üßπ CLEANUP: Limpando recursos da verifica√ß√£o expirada {event.verification_id}"
            )

            # Em produ√ß√£o, limparia cache, locks, etc.

        except Exception as e:
            logger.error(f"Erro na limpeza de verifica√ß√£o expirada: {e}")


class CPFDuplicateDetectedHandler(EventHandler):
    """
    Handler para evento de CPF duplicado detectado.

    Responsabilidades:
    - Log de seguran√ßa
    - Notifica√ß√£o para administradores
    - An√°lise de padr√µes suspeitos
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return CPFDuplicateDetected

    async def handle(self, event: CPFDuplicateDetected) -> None:
        """
        Processa evento de CPF duplicado detectado.

        Args:
            event: Evento de CPF duplicado
        """
        logger.warning(
            f"üö® CPF DUPLICADO DETECTADO: {event.cpf_number} "
            f"- Atual: {event.current_username} ({event.current_user_id}) "
            f"- Existente: {event.existing_username} ({event.existing_user_id}) "
            f"- A√ß√£o: {event.resolution_action}"
        )

        # Notifica administradores
        await self._notify_admins_duplicate(event)

        # Log de seguran√ßa
        await self._security_audit_duplicate(event)

        # An√°lise de padr√µes suspeitos
        await self._analyze_suspicious_pattern(event)

    async def _notify_admins_duplicate(self, event: CPFDuplicateDetected) -> None:
        """
        Notifica administradores sobre CPF duplicado.

        Args:
            event: Evento de CPF duplicado
        """
        try:
            logger.info(
                f"üì¢ ADMIN ALERT: CPF duplicado - "
                f"Usu√°rios {event.current_user_id} e {event.existing_user_id} "
                f"- Resolu√ß√£o: {event.resolution_action}"
            )

            # Em produ√ß√£o, enviaria para canal de admins

        except Exception as e:
            logger.error(f"Erro ao notificar admins sobre CPF duplicado: {e}")

    async def _security_audit_duplicate(self, event: CPFDuplicateDetected) -> None:
        """
        Registra evento para auditoria de seguran√ßa.

        Args:
            event: Evento de CPF duplicado
        """
        try:
            logger.info(
                f"üîí SECURITY AUDIT: CPF duplicado registrado - "
                f"CPF: {event.cpf_number} - "
                f"Timestamp: {event.occurred_at.isoformat()}"
            )

            # Em produ√ß√£o, salvaria em sistema de auditoria

        except Exception as e:
            logger.error(f"Erro no security audit para CPF duplicado: {e}")

    async def _analyze_suspicious_pattern(self, event: CPFDuplicateDetected) -> None:
        """
        Analisa padr√µes suspeitos de uso de CPF.

        Args:
            event: Evento de CPF duplicado
        """
        try:
            logger.debug(
                f"üïµÔ∏è PATTERN ANALYSIS: Analisando padr√£o suspeito - "
                f"CPF: {event.cpf_number} - Usu√°rios relacionados: 2+"
            )

            # Em produ√ß√£o, alimentaria sistema de detec√ß√£o de fraude

        except Exception as e:
            logger.error(f"Erro na an√°lise de padr√£o suspeito: {e}")


class CPFRemappedHandler(EventHandler):
    """
    Handler para evento de CPF remapeado.

    Responsabilidades:
    - Log de auditoria de remapeamento
    - Notifica√ß√£o para usu√°rios afetados
    - Atualiza√ß√£o de permiss√µes
    """

    @property
    def event_type(self) -> Type[DomainEvent]:
        return CPFRemapped

    async def handle(self, event: CPFRemapped) -> None:
        """
        Processa evento de CPF remapeado.

        Args:
            event: Evento de CPF remapeado
        """
        logger.info(
            f"üîÑ CPF REMAPEADO: {event.cpf_number} "
            f"- De: {event.old_username} ({event.old_user_id}) "
            f"- Para: {event.new_username} ({event.new_user_id}) "
            f"- Motivo: {event.reason}"
        )

        # Notifica usu√°rios afetados
        await self._notify_affected_users(event)

        # Log de auditoria
        await self._audit_cpf_remap(event)

        # Atualiza permiss√µes
        await self._update_permissions(event)

    async def _notify_affected_users(self, event: CPFRemapped) -> None:
        """
        Notifica usu√°rios afetados pelo remapeamento.

        Args:
            event: Evento de CPF remapeado
        """
        try:
            # Notifica usu√°rio anterior
            logger.info(
                f"üí¨ OLD USER NOTIFICATION: {event.old_username} "
                f"- CPF foi associado a nova conta"
            )

            # Notifica novo usu√°rio
            logger.info(
                f"üí¨ NEW USER NOTIFICATION: {event.new_username} "
                f"- CPF foi associado √† sua conta"
            )

            # Em produ√ß√£o, enviaria notifica√ß√µes reais

        except Exception as e:
            logger.error(f"Erro ao notificar usu√°rios sobre remapeamento: {e}")

    async def _audit_cpf_remap(self, event: CPFRemapped) -> None:
        """
        Registra remapeamento para auditoria.

        Args:
            event: Evento de CPF remapeado
        """
        try:
            logger.info(
                f"üìã REMAP AUDIT: Remapeamento registrado - "
                f"CPF: {event.cpf_number} - "
                f"Motivo: {event.reason} - "
                f"Timestamp: {event.occurred_at.isoformat()}"
            )

            # Em produ√ß√£o, salvaria em sistema de auditoria

        except Exception as e:
            logger.error(f"Erro no audit de remapeamento: {e}")

    async def _update_permissions(self, event: CPFRemapped) -> None:
        """
        Atualiza permiss√µes ap√≥s remapeamento.

        Args:
            event: Evento de CPF remapeado
        """
        try:
            logger.debug(
                f"üîë PERMISSIONS UPDATE: Atualizando permiss√µes ap√≥s remapeamento "
                f"- Novo usu√°rio: {event.new_user_id}"
            )

            # Em produ√ß√£o, atualizaria permiss√µes reais

        except Exception as e:
            logger.error(f"Erro ao atualizar permiss√µes: {e}")