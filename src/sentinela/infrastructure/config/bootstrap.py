"""
Bootstrap da aplica√ß√£o.

Inicializa e configura toda a nova arquitetura.
"""

import logging
import asyncio
from typing import Optional

from .dependency_injection import configure_dependencies, get_container
from ...domain.repositories.user_repository import UserRepository

logger = logging.getLogger(__name__)


class ApplicationBootstrap:
    """
    Bootstrap da aplica√ß√£o.

    Respons√°vel por:
    - Configurar depend√™ncias
    - Inicializar infraestrutura
    - Verificar sa√∫de do sistema
    - Preparar para opera√ß√£o
    """

    def __init__(self):
        self._is_initialized = False

    async def initialize(self) -> None:
        """
        Inicializa a aplica√ß√£o.

        Raises:
            BootstrapError: Se erro na inicializa√ß√£o
        """
        if self._is_initialized:
            logger.warning("Application already initialized")
            return

        logger.info("üöÄ Initializing application with new architecture...")

        try:
            # 1. Configurar depend√™ncias
            await self._configure_dependencies()

            # 2. Verificar infraestrutura
            await self._verify_infrastructure()

            # 3. Executar migrations se necess√°rio
            await self._run_migrations()

            # 4. Verificar sa√∫de do sistema
            await self._health_check()

            self._is_initialized = True
            logger.info("‚úÖ Application initialized successfully")

        except Exception as e:
            logger.error(f"‚ùå Failed to initialize application: {e}")
            raise BootstrapError(f"Initialization failed: {e}") from e

    async def _configure_dependencies(self) -> None:
        """Configura todas as depend√™ncias."""
        logger.info("üì¶ Configuring dependencies...")

        try:
            configure_dependencies()
            container = get_container()

            # Verifica se depend√™ncias cr√≠ticas foram registradas
            critical_deps = [UserRepository]

            for dep in critical_deps:
                try:
                    instance = container.get(dep)
                    logger.debug(f"‚úÖ {dep.__name__}: {instance.__class__.__name__}")
                except Exception as e:
                    raise BootstrapError(f"Failed to resolve {dep.__name__}: {e}")

            # Registra event handlers no EventBus
            logger.info("üîß Registering event handlers...")
            try:
                from ..events.event_handler_registry import EventHandlerRegistry
                from ..events.event_bus import EventBus

                event_bus = container.get(EventBus)
                registry = EventHandlerRegistry(event_bus)
                registry.register_all_handlers()
                logger.info("‚úÖ Event handlers registered successfully")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è Failed to register event handlers: {e}")
                # N√£o falha bootstrap por event handlers (sistema pode funcionar sem eventos)

            logger.info("‚úÖ Dependencies configured successfully")

        except Exception as e:
            raise BootstrapError(f"Dependency configuration failed: {e}") from e

    async def _verify_infrastructure(self) -> None:
        """Verifica se infraestrutura est√° dispon√≠vel."""
        logger.info("üîç Verifying infrastructure...")

        try:
            container = get_container()

            # Testa repository
            user_repo = container.get(UserRepository)

            # Testa conex√£o com banco (tentativa de opera√ß√£o simples)
            await user_repo.count_active_users()

            logger.info("‚úÖ Infrastructure verified successfully")

        except Exception as e:
            raise BootstrapError(f"Infrastructure verification failed: {e}") from e

    async def _run_migrations(self) -> None:
        """Executa migrations se necess√°rio."""
        logger.info("üîÑ Checking for migrations...")

        try:
            # Por enquanto, s√≥ log - migrations ser√£o implementadas depois
            logger.info("‚ÑπÔ∏è Migration system not yet implemented")

        except Exception as e:
            logger.warning(f"Migration check failed: {e}")

    async def _health_check(self) -> None:
        """Executa health check do sistema."""
        logger.info("üè• Running health check...")

        try:
            container = get_container()

            # Verifica cada componente cr√≠tico
            user_repo = container.get(UserRepository)

            # Health check b√°sico
            count = await user_repo.count_active_users()
            logger.info(f"üìä Active users: {count}")

            logger.info("‚úÖ Health check passed")

        except Exception as e:
            logger.warning(f"Health check failed: {e}")
            # N√£o falha a inicializa√ß√£o por health check

    def is_initialized(self) -> bool:
        """
        Verifica se aplica√ß√£o foi inicializada.

        Returns:
            bool: True se inicializada
        """
        return self._is_initialized


class BootstrapError(Exception):
    """Erro na inicializa√ß√£o da aplica√ß√£o."""
    pass


# Inst√¢ncia global do bootstrap
_bootstrap: Optional[ApplicationBootstrap] = None


def get_bootstrap() -> ApplicationBootstrap:
    """
    Retorna inst√¢ncia global do bootstrap.

    Returns:
        ApplicationBootstrap: Inst√¢ncia do bootstrap
    """
    global _bootstrap
    if _bootstrap is None:
        _bootstrap = ApplicationBootstrap()
    return _bootstrap


async def initialize_application() -> None:
    """
    Fun√ß√£o de conveni√™ncia para inicializar a aplica√ß√£o.

    Raises:
        BootstrapError: Se erro na inicializa√ß√£o
    """
    bootstrap = get_bootstrap()
    await bootstrap.initialize()


def is_application_initialized() -> bool:
    """
    Verifica se aplica√ß√£o foi inicializada.

    Returns:
        bool: True se inicializada
    """
    global _bootstrap
    return _bootstrap is not None and _bootstrap.is_initialized()


# Decorator para garantir que aplica√ß√£o est√° inicializada
def require_initialized(func):
    """
    Decorator que garante que aplica√ß√£o foi inicializada.

    Args:
        func: Fun√ß√£o a decorar

    Returns:
        Fun√ß√£o decorada

    Raises:
        RuntimeError: Se aplica√ß√£o n√£o inicializada
    """
    import functools

    @functools.wraps(func)
    async def wrapper(*args, **kwargs):
        if not is_application_initialized():
            raise RuntimeError(
                "Application not initialized. Call initialize_application() first."
            )
        return await func(*args, **kwargs)

    return wrapper