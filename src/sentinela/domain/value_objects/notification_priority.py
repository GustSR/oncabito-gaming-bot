"""
Notification Priority Value Object.

Define os n√≠veis de prioridade para notifica√ß√µes t√©cnicas.
"""

from enum import Enum
from dataclasses import dataclass
from typing import Optional
from datetime import timedelta


class NotificationPriority(Enum):
    """N√≠veis de prioridade de notifica√ß√µes."""

    CRITICAL = "critical"    # üö® Cr√≠tico - Requer aten√ß√£o imediata
    HIGH = "high"           # ‚ö†Ô∏è Alta - Importante, resposta r√°pida
    MEDIUM = "medium"       # üîß M√©dia - Normal, resposta padr√£o
    LOW = "low"            # üí° Baixa - Informativo
    INFO = "info"          # ‚ÑπÔ∏è Info - Apenas informativo


@dataclass(frozen=True)
class NotificationSLA:
    """
    Define SLA (Service Level Agreement) para notifica√ß√µes.

    Attributes:
        priority: N√≠vel de prioridade
        response_time: Tempo esperado de resposta
        emoji: Emoji representativo
        requires_acknowledgment: Se requer confirma√ß√£o de leitura
    """

    priority: NotificationPriority
    response_time: timedelta
    emoji: str
    requires_acknowledgment: bool = False

    @classmethod
    def for_priority(cls, priority: NotificationPriority) -> 'NotificationSLA':
        """
        Cria SLA baseado na prioridade.

        Args:
            priority: N√≠vel de prioridade

        Returns:
            NotificationSLA: Configura√ß√£o de SLA
        """
        sla_config = {
            NotificationPriority.CRITICAL: cls(
                priority=NotificationPriority.CRITICAL,
                response_time=timedelta(minutes=15),
                emoji="üö®",
                requires_acknowledgment=True
            ),
            NotificationPriority.HIGH: cls(
                priority=NotificationPriority.HIGH,
                response_time=timedelta(minutes=30),
                emoji="‚ö†Ô∏è",
                requires_acknowledgment=True
            ),
            NotificationPriority.MEDIUM: cls(
                priority=NotificationPriority.MEDIUM,
                response_time=timedelta(hours=2),
                emoji="üîß",
                requires_acknowledgment=False
            ),
            NotificationPriority.LOW: cls(
                priority=NotificationPriority.LOW,
                response_time=timedelta(hours=4),
                emoji="üí°",
                requires_acknowledgment=False
            ),
            NotificationPriority.INFO: cls(
                priority=NotificationPriority.INFO,
                response_time=timedelta(hours=24),
                emoji="‚ÑπÔ∏è",
                requires_acknowledgment=False
            )
        }

        return sla_config[priority]

    def get_sla_text(self) -> str:
        """Retorna texto formatado do SLA."""
        hours = self.response_time.total_seconds() / 3600

        if hours < 1:
            minutes = int(self.response_time.total_seconds() / 60)
            time_text = f"{minutes} minutos"
        elif hours < 24:
            time_text = f"{int(hours)} hora(s)"
        else:
            days = int(hours / 24)
            time_text = f"{days} dia(s)"

        return f"Resposta em at√© {time_text}"


@dataclass(frozen=True)
class NotificationFormat:
    """
    Define formato de exibi√ß√£o da notifica√ß√£o.

    Attributes:
        title: T√≠tulo da notifica√ß√£o
        priority_sla: SLA da notifica√ß√£o
        use_html: Se usa formata√ß√£o HTML
        disable_preview: Se desabilita preview de links
        use_compact_format: Se usa formato compacto
    """

    title: str
    priority_sla: NotificationSLA
    use_html: bool = True
    disable_preview: bool = True
    use_compact_format: bool = False

    def get_formatted_title(self) -> str:
        """Retorna t√≠tulo formatado com emoji e prioridade."""
        emoji = self.priority_sla.emoji
        priority_name = self.priority_sla.priority.value.upper()

        if self.priority_sla.priority == NotificationPriority.CRITICAL:
            return f"{emoji} <b>{self.title.upper()}</b> {emoji}"

        return f"{emoji} <b>{self.title.upper()}</b>"


def determine_notification_priority(
    urgency_level: Optional[str],
    category: Optional[str],
    has_attachments: bool = False
) -> NotificationPriority:
    """
    Determina prioridade da notifica√ß√£o baseado em crit√©rios.

    Args:
        urgency_level: N√≠vel de urg√™ncia reportado
        category: Categoria do problema
        has_attachments: Se tem anexos (screenshots, etc.)

    Returns:
        NotificationPriority: Prioridade determinada
    """
    # Urg√™ncia expl√≠cita tem prioridade
    if urgency_level == "high":
        return NotificationPriority.CRITICAL

    if urgency_level == "medium":
        return NotificationPriority.HIGH

    # Categorias cr√≠ticas
    critical_categories = ["connectivity", "outage", "service_down"]
    if category in critical_categories:
        return NotificationPriority.HIGH

    # Performance com evid√™ncias (screenshots) = prioridade m√©dia-alta
    if category == "performance" and has_attachments:
        return NotificationPriority.MEDIUM

    # Configura√ß√£o e equipamento = prioridade m√©dia
    if category in ["configuration", "equipment"]:
        return NotificationPriority.MEDIUM

    # Outros casos = prioridade baixa
    return NotificationPriority.LOW