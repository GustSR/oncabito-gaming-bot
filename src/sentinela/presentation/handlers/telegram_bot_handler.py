"""
Telegram Bot Handler.

Camada de apresenta√ß√£o para integra√ß√£o com Telegram Bot,
utilizando a nova arquitetura com dependency injection.
"""

import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from ...infrastructure.config.container import get_container
from ...application.use_cases.hubsoft_integration_use_case import HubSoftIntegrationUseCase
from ...application.use_cases.cpf_verification_use_case import CPFVerificationUseCase
from ...application.use_cases.admin_operations_use_case import AdminOperationsUseCase
from ...domain.value_objects.identifiers import UserId
from ...core.config import SUPPORT_TOPIC_ID, TELEGRAM_GROUP_ID

logger = logging.getLogger(__name__)


# ==================== SUPPORT CONVERSATION STATES ====================

class SupportState:
    """Estados do fluxo conversacional de suporte."""
    IDLE = "idle"
    CATEGORY = "category"
    GAME = "game"
    TIMING = "timing"
    DESCRIPTION = "description"
    ATTACHMENTS = "attachments"
    CONFIRMATION = "confirmation"


# ==================== HELPER FUNCTIONS ====================

def get_progress_bar(current_step: int, total_steps: int = 6) -> str:
    """Retorna barra de progresso visual."""
    filled = "‚ñì" * current_step
    empty = "‚ñë" * (total_steps - current_step)
    return f"{filled}{empty} {current_step}/{total_steps}"


def get_step_status(step: int, current: int) -> str:
    """Retorna emoji de status para cada etapa."""
    if step < current:
        return "‚úÖ"
    elif step == current:
        return "üîÑ"
    else:
        return "‚è≥"


def init_support_state(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Inicializa estado do suporte no context.user_data."""
    context.user_data['support'] = {
        'state': SupportState.IDLE,
        'category': None,
        'category_name': None,
        'game': None,
        'game_name': None,
        'timing': None,
        'timing_name': None,
        'description': None,
        'attachments': [],
        'current_step': 0
    }


def get_support_state(context: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    """Obt√©m estado do suporte."""
    if 'support' not in context.user_data:
        init_support_state(context)
    return context.user_data['support']


def clear_support_state(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Limpa estado do suporte."""
    if 'support' in context.user_data:
        del context.user_data['support']


class TelegramBotHandler:
    """Handler principal para intera√ß√µes do Telegram Bot."""

    def __init__(self):
        self._container = None
        self._hubsoft_use_case: Optional[HubSoftIntegrationUseCase] = None
        self._cpf_use_case: Optional[CPFVerificationUseCase] = None
        self._admin_use_case: Optional[AdminOperationsUseCase] = None

    async def _ensure_initialized(self) -> None:
        """Garante que o handler est√° inicializado."""
        if self._container is None:
            self._container = await get_container()
            self._hubsoft_use_case = self._container.get("hubsoft_integration_use_case")
            self._cpf_use_case = self._container.get("cpf_verification_use_case")
            self._admin_use_case = self._container.get("admin_operations_use_case")

    async def handle_start_command(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Processa comando /start."""
        try:
            await self._ensure_initialized()

            user = update.effective_user
            if not user:
                return

            welcome_message = (
                f"üéÆ Ol√° {user.first_name}! Bem-vindo ao suporte OnCabo Gaming!\n\n"
                "üîß Para criar um ticket de suporte, use /suporte\n"
                "üìã Para verificar seus tickets, use /status\n"
                "üÜî Para verificar seu CPF, use /verificar_cpf\n\n"
                "üí° Digite /ajuda para ver todos os comandos dispon√≠veis."
            )

            await update.message.reply_text(welcome_message)

            logger.info(f"Usu√°rio {user.id} iniciou conversa")

        except Exception as e:
            logger.error(f"Erro no comando /start: {e}")
            await update.message.reply_text(
                "‚ùå Ocorreu um erro inesperado. Tente novamente mais tarde."
            )

    async def handle_support_command(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Processa comando /suporte - Inicia fluxo conversacional."""
        try:
            await self._ensure_initialized()

            user = update.effective_user
            chat_id = update.effective_chat.id
            is_group = chat_id != user.id

            if not user:
                return

            # Se foi enviado no grupo, envia notifica√ß√£o ao t√≥pico
            if is_group:
                try:
                    # Deleta o comando do grupo
                    await update.message.delete()

                    # Envia notifica√ß√£o ao t√≥pico de suporte
                    await context.bot.send_message(
                        chat_id=int(TELEGRAM_GROUP_ID),
                        message_thread_id=int(SUPPORT_TOPIC_ID),
                        text=(
                            f"‚úÖ @{user.username or user.first_name}, recebi seu pedido de suporte!\n\n"
                            f"Vou te chamar no privado agora para coletar as informa√ß√µes do seu problema "
                            f"de forma organizada.\n\n"
                            f"Por favor, verifique suas mensagens diretas comigo! üëÜ"
                        ),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.warning(f"Erro ao enviar notifica√ß√£o no t√≥pico: {e}")

            # Inicializa estado do suporte
            init_support_state(context)
            state = get_support_state(context)
            state['state'] = SupportState.CATEGORY
            state['current_step'] = 1

            # Monta teclado de categorias
            keyboard = [
                [
                    InlineKeyboardButton("üåê Conectividade/Ping", callback_data="sup_cat_connectivity"),
                    InlineKeyboardButton("‚ö° Performance/FPS", callback_data="sup_cat_performance")
                ],
                [
                    InlineKeyboardButton("üéÆ Problemas no Jogo", callback_data="sup_cat_game_issues"),
                    InlineKeyboardButton("üíª Configura√ß√£o", callback_data="sup_cat_configuration")
                ],
                [
                    InlineKeyboardButton("üìû Outros", callback_data="sup_cat_others")
                ],
                [
                    InlineKeyboardButton("‚ùå Cancelar", callback_data="sup_cancel")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            progress = get_progress_bar(1)
            message = (
                f"üéÆ **SUPORTE GAMER ONCABO**\n\n"
                f"Vamos criar seu chamado de suporte de forma r√°pida e organizada!\n\n"
                f"{progress} - Categoria do Problema\n\n"
                f"Selecione a categoria que melhor descreve seu problema:"
            )

            # SEMPRE responde no privado do usu√°rio
            await context.bot.send_message(
                chat_id=user.id,
                text=message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            logger.info(f"Usu√°rio {user.id} iniciou fluxo de suporte - Step 1 (Categoria)")

        except Exception as e:
            logger.error(f"Erro no comando /suporte: {e}")
            try:
                await context.bot.send_message(
                    chat_id=user.id,
                    text="‚ùå Erro ao iniciar suporte. Tente novamente."
                )
            except:
                pass

    async def handle_status_command(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Processa comando /status."""
        try:
            await self._ensure_initialized()

            user = update.effective_user
            if not user:
                return

            # Busca tickets do usu√°rio via use case
            user_id = UserId(user.id)

            # Por enquanto, simulamos a resposta at√© a migra√ß√£o completa
            # TODO: Implementar busca real de tickets
            message = (
                "üìã **Seus Tickets de Suporte**\n\n"
                "üîÑ Buscando seus tickets...\n\n"
                "‚ö†Ô∏è Sistema em migra√ß√£o - funcionalidade ser√° restaurada em breve."
            )

            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )

            logger.info(f"Usu√°rio {user.id} verificou status dos tickets")

        except Exception as e:
            logger.error(f"Erro no comando /status: {e}")
            await update.message.reply_text(
                "‚ùå Erro ao buscar tickets. Tente novamente."
            )

    async def handle_verify_cpf_command(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Processa comando /verificar_cpf."""
        try:
            await self._ensure_initialized()

            user = update.effective_user
            if not user:
                return

            # Verifica se j√° tem verifica√ß√£o pendente
            pending_verification = await self._cpf_use_case.get_pending_verification(user.id)

            if pending_verification.success and pending_verification.data:
                message = (
                    "‚è≥ **Verifica√ß√£o Pendente**\n\n"
                    "Voc√™ j√° tem uma verifica√ß√£o de CPF em andamento.\n\n"
                    "üì± Por favor, responda com seu CPF para continuar."
                )
            else:
                # Inicia nova verifica√ß√£o
                result = await self._cpf_use_case.start_verification(
                    user_id=user.id,
                    username=user.username or user.first_name,
                    verification_type="hubsoft_sync"
                )

                if result.success:
                    message = (
                        "üÜî **Verifica√ß√£o de CPF**\n\n"
                        "Para verificar seu cadastro no sistema, preciso validar seu CPF.\n\n"
                        "üì± **Digite seu CPF** (apenas n√∫meros):\n"
                        "Exemplo: 12345678901\n\n"
                        "üîí Seus dados est√£o protegidos e ser√£o usados apenas para verifica√ß√£o."
                    )
                else:
                    message = f"‚ùå Erro ao iniciar verifica√ß√£o: {result.message}"

            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )

            logger.info(f"Usu√°rio {user.id} iniciou verifica√ß√£o de CPF")

        except Exception as e:
            logger.error(f"Erro no comando /verificar_cpf: {e}")
            await update.message.reply_text(
                "‚ùå Erro ao iniciar verifica√ß√£o. Tente novamente."
            )

    async def handle_admin_command(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Processa comandos administrativos."""
        try:
            await self._ensure_initialized()

            user = update.effective_user
            if not user:
                return

            # Verifica se √© admin (implementar valida√ß√£o real)
            if not self._is_admin(user.id):
                await update.message.reply_text("‚ùå Acesso negado.")
                return

            # Menu administrativo
            keyboard = [
                [
                    InlineKeyboardButton("üìã Listar Tickets", callback_data="admin_list_tickets"),
                    InlineKeyboardButton("üìä Estat√≠sticas", callback_data="admin_stats")
                ],
                [
                    InlineKeyboardButton("üîÑ Sync HubSoft", callback_data="admin_sync"),
                    InlineKeyboardButton("‚öôÔ∏è Configura√ß√µes", callback_data="admin_config")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            message = (
                "‚öôÔ∏è **Painel Administrativo**\n\n"
                "Selecione uma op√ß√£o:"
            )

            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

            logger.info(f"Admin {user.id} acessou painel administrativo")

        except Exception as e:
            logger.error(f"Erro no comando admin: {e}")
            await update.message.reply_text(
                "‚ùå Erro no painel administrativo."
            )

    async def handle_callback_query(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Processa callbacks de bot√µes inline."""
        try:
            await self._ensure_initialized()

            query = update.callback_query
            if not query:
                return

            await query.answer()

            callback_data = query.data
            user = query.from_user

            # Callbacks do novo fluxo de suporte
            if callback_data.startswith("sup_"):
                await self._handle_support_callback(query, context, callback_data)
            # Callbacks antigos (manter compatibilidade)
            elif callback_data.startswith("cat_"):
                await self._handle_category_selection(query, callback_data)
            elif callback_data.startswith("admin_"):
                await self._handle_admin_callback(query, callback_data)
            else:
                logger.warning(f"Callback n√£o reconhecido: {callback_data}")

        except Exception as e:
            logger.error(f"Erro no callback: {e}")
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    "‚ùå Erro inesperado. Tente novamente."
                )

    async def _handle_category_selection(self, query, callback_data: str) -> None:
        """Processa sele√ß√£o de categoria de suporte."""
        category_map = {
            "cat_connectivity": "üåê Conectividade/Ping",
            "cat_performance": "‚ö° Performance/FPS",
            "cat_game_issues": "üéÆ Problemas no Jogo",
            "cat_configuration": "üíª Configura√ß√£o",
            "cat_others": "üìû Outros"
        }

        category_name = category_map.get(callback_data, "Outros")

        message = (
            f"üìù **Categoria Selecionada:** {category_name}\n\n"
            "Agora me conte com detalhes sobre seu problema:\n\n"
            "‚Ä¢ Quando come√ßou o problema?\n"
            "‚Ä¢ Em qual jogo acontece?\n"
            "‚Ä¢ Descri√ß√£o detalhada\n\n"
            "üí° Quanto mais detalhes, melhor poderemos ajudar!"
        )

        await query.edit_message_text(
            message,
            parse_mode='Markdown'
        )

        # Aqui registraria o contexto da conversa para pr√≥ximas mensagens
        # TODO: Implementar state management para conversas

    async def _handle_admin_callback(self, query, callback_data: str) -> None:
        """Processa callbacks administrativos."""
        user = query.from_user

        if not self._is_admin(user.id):
            await query.edit_message_text("‚ùå Acesso negado.")
            return

        if callback_data == "admin_list_tickets":
            # Lista tickets via admin use case
            result = await self._admin_use_case.list_tickets_with_filters(
                admin_user_id=user.id,
                status_filter=None,
                limit=10
            )

            if result.success:
                message = (
                    "üìã **Tickets Recentes**\n\n"
                    f"‚úÖ Encontrados {result.affected_items} tickets\n\n"
                    "‚ö†Ô∏è Visualiza√ß√£o detalhada em desenvolvimento"
                )
            else:
                message = f"‚ùå Erro: {result.message}"

        elif callback_data == "admin_stats":
            # Obt√©m estat√≠sticas via admin use case
            result = await self._admin_use_case.get_comprehensive_stats(
                admin_user_id=user.id,
                include_details=False,
                date_range_days=7
            )

            if result.success and result.data:
                message = (
                    "üìä **Estat√≠sticas do Sistema**\n\n"
                    f"üìÖ √öltimos {result.data.get('period_days', 7)} dias\n\n"
                    "‚ö†Ô∏è Dados detalhados em desenvolvimento"
                )
            else:
                message = f"‚ùå Erro: {result.message}"

        elif callback_data == "admin_sync":
            message = (
                "üîÑ **Sincroniza√ß√£o HubSoft**\n\n"
                "Funcionalidade de sync dispon√≠vel em breve.\n\n"
                "üöß Sistema em migra√ß√£o para nova arquitetura"
            )

        elif callback_data == "admin_config":
            message = (
                "‚öôÔ∏è **Configura√ß√µes do Sistema**\n\n"
                "Painel de configura√ß√µes em desenvolvimento.\n\n"
                "üìã Use comandos administrativos por enquanto"
            )

        else:
            message = "‚ùì Op√ß√£o n√£o reconhecida."

        await query.edit_message_text(
            message,
            parse_mode='Markdown'
        )

    async def handle_text_message(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Processa mensagens de texto."""
        try:
            await self._ensure_initialized()

            user = update.effective_user
            if not user:
                return

            text = update.message.text

            # Verifica se est√° em fluxo de suporte
            if 'support' in context.user_data:
                state = get_support_state(context)

                # Se est√° aguardando descri√ß√£o
                if state['state'] == SupportState.DESCRIPTION:
                    # Valida descri√ß√£o m√≠nima
                    if len(text.strip()) < 10:
                        await update.message.reply_text(
                            "‚ùå A descri√ß√£o precisa ter pelo menos 10 caracteres.\n\n"
                            "Por favor, descreva o problema com mais detalhes.",
                            parse_mode='Markdown'
                        )
                        return

                    # Salva descri√ß√£o
                    state['description'] = text.strip()
                    state['state'] = SupportState.ATTACHMENTS
                    state['current_step'] = 5

                    # Mostra etapa de anexos
                    await self._show_attachments_step(update.message, context)
                    logger.info(f"Usu√°rio {user.id} enviou descri√ß√£o ({len(text)} chars)")
                    return

            # Verifica se √© CPF (apenas n√∫meros)
            if text and text.isdigit() and len(text) == 11:
                await self._handle_cpf_input(update, text)
                return

            # Outras mensagens de texto
            message = (
                "üí¨ Mensagem recebida!\n\n"
                "Para criar um ticket de suporte, use /suporte\n"
                "Para verificar status, use /status\n\n"
                "üìã Digite /ajuda para ver todos os comandos."
            )

            await update.message.reply_text(message)

        except Exception as e:
            logger.error(f"Erro ao processar mensagem de texto: {e}")
            await update.message.reply_text(
                "‚ùå Erro ao processar mensagem."
            )

    async def handle_photo_message(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Processa mensagens de foto (anexos)."""
        try:
            await self._ensure_initialized()

            user = update.effective_user
            if not user:
                return

            # Verifica se est√° em fluxo de suporte e aguardando anexos
            if 'support' not in context.user_data:
                await update.message.reply_text(
                    "üì∑ Foto recebida!\n\n"
                    "Para criar um ticket de suporte com anexos, use /suporte",
                    parse_mode='Markdown'
                )
                return

            state = get_support_state(context)

            # S√≥ aceita fotos na etapa de anexos
            if state['state'] != SupportState.ATTACHMENTS:
                await update.message.reply_text(
                    "üì∑ Aguarde o momento correto para enviar anexos.\n\n"
                    "Continue o fluxo de suporte primeiro.",
                    parse_mode='Markdown'
                )
                return

            # Verifica limite de anexos
            attachments = state.get('attachments', [])
            if len(attachments) >= 3:
                await update.message.reply_text(
                    "‚ùå Limite de 3 anexos atingido!\n\n"
                    "Clique em **Continuar** para prosseguir.",
                    parse_mode='Markdown'
                )
                return

            # Pega a maior resolu√ß√£o da foto
            photo = update.message.photo[-1]

            # Salva informa√ß√µes do anexo
            attachment_info = {
                'file_id': photo.file_id,
                'file_size': photo.file_size,
                'width': photo.width,
                'height': photo.height
            }

            attachments.append(attachment_info)
            state['attachments'] = attachments

            attachments_count = len(attachments)

            # Mensagem de confirma√ß√£o
            await update.message.reply_text(
                f"‚úÖ **Anexo {attachments_count}/3 adicionado com sucesso!**\n\n"
                f"üì∏ Voc√™ pode enviar mais {3 - attachments_count} foto(s) ou clicar em **Continuar**.",
                parse_mode='Markdown'
            )

            logger.info(f"Usu√°rio {user.id} enviou anexo {attachments_count}/3")

        except Exception as e:
            logger.error(f"Erro ao processar foto: {e}")
            await update.message.reply_text(
                "‚ùå Erro ao processar foto. Tente novamente."
            )

    async def _handle_cpf_input(self, update: Update, cpf: str) -> None:
        """Processa entrada de CPF."""
        user = update.effective_user

        try:
            # Processa verifica√ß√£o via use case
            result = await self._cpf_use_case.process_verification_with_cpf(
                user_id=user.id,
                cpf_number=cpf
            )

            if result.success:
                if result.data and result.data.get('verified'):
                    client_data = result.data.get('client_data', {})
                    client_name = client_data.get('name', 'Cliente')

                    message = (
                        f"‚úÖ **CPF Verificado com Sucesso!**\n\n"
                        f"üë§ **Nome:** {client_name}\n"
                        f"üìã **CPF:** {cpf[:3]}***{cpf[-2:]}\n\n"
                        "üéÆ Agora voc√™ pode criar tickets de suporte!"
                    )
                else:
                    message = (
                        "‚ùå **CPF n√£o encontrado no sistema**\n\n"
                        "Seu CPF n√£o foi localizado em nossa base de dados.\n\n"
                        "üìû Entre em contato conosco para mais informa√ß√µes."
                    )
            else:
                message = f"‚ùå Erro na verifica√ß√£o: {result.message}"

            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"Erro ao processar CPF: {e}")
            await update.message.reply_text(
                "‚ùå Erro ao verificar CPF. Tente novamente."
            )

    # ==================== SUPPORT FLOW HANDLERS ====================

    async def _handle_support_callback(
        self,
        query,
        context: ContextTypes.DEFAULT_TYPE,
        callback_data: str
    ) -> None:
        """Router principal para callbacks do fluxo de suporte."""
        # Cancel
        if callback_data == "sup_cancel":
            await self._handle_support_cancel(query, context)
        # Back
        elif callback_data == "sup_back":
            await self._handle_support_back(query, context)
        # Category selection
        elif callback_data.startswith("sup_cat_"):
            await self._handle_support_category(query, context, callback_data)
        # Game selection
        elif callback_data.startswith("sup_game_"):
            await self._handle_support_game(query, context, callback_data)
        # Timing selection
        elif callback_data.startswith("sup_timing_"):
            await self._handle_support_timing(query, context, callback_data)
        # Attachments
        elif callback_data.startswith("sup_att_"):
            await self._handle_support_attachment_action(query, context, callback_data)
        # Confirmation
        elif callback_data.startswith("sup_confirm_"):
            await self._handle_support_confirmation(query, context, callback_data)
        # Edit
        elif callback_data.startswith("sup_edit_"):
            await self._handle_support_edit(query, context, callback_data)
        else:
            logger.warning(f"Callback de suporte n√£o reconhecido: {callback_data}")

    async def _handle_support_cancel(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Cancela o fluxo de suporte."""
        clear_support_state(context)
        await query.edit_message_text(
            "‚ùå **Formul√°rio Cancelado**\n\n"
            "Voc√™ pode iniciar um novo chamado a qualquer momento usando /suporte",
            parse_mode='Markdown'
        )
        logger.info(f"Usu√°rio {query.from_user.id} cancelou o fluxo de suporte")

    async def _handle_support_back(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Volta para etapa anterior."""
        state = get_support_state(context)
        current_state = state['state']

        # Define para onde voltar
        if current_state == SupportState.GAME:
            # Volta para categoria
            state['state'] = SupportState.CATEGORY
            state['current_step'] = 1
            await self._show_category_step(query, context)
        elif current_state == SupportState.TIMING:
            # Volta para jogo
            state['state'] = SupportState.GAME
            state['current_step'] = 2
            await self._show_game_step(query, context)
        elif current_state == SupportState.ATTACHMENTS:
            # Volta para timing
            state['state'] = SupportState.TIMING
            state['current_step'] = 3
            await self._show_timing_step(query, context)
        elif current_state == SupportState.CONFIRMATION:
            # Volta para attachments
            state['state'] = SupportState.ATTACHMENTS
            state['current_step'] = 5
            await self._show_attachments_step(query, context)
        else:
            await query.answer("N√£o √© poss√≠vel voltar nesta etapa")

    async def _handle_support_category(
        self,
        query,
        context: ContextTypes.DEFAULT_TYPE,
        callback_data: str
    ) -> None:
        """Processa sele√ß√£o de categoria."""
        category_key = callback_data.replace("sup_cat_", "")

        category_names = {
            "connectivity": "üåê Conectividade/Ping",
            "performance": "‚ö° Performance/FPS",
            "game_issues": "üéÆ Problemas no Jogo",
            "configuration": "üíª Configura√ß√£o",
            "others": "üìû Outros"
        }

        state = get_support_state(context)
        state['category'] = category_key
        state['category_name'] = category_names.get(category_key, "Outros")
        state['state'] = SupportState.GAME
        state['current_step'] = 2

        await self._show_game_step(query, context)
        logger.info(f"Usu√°rio {query.from_user.id} selecionou categoria: {category_key}")

    async def _show_game_step(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Mostra etapa de sele√ß√£o de jogo."""
        state = get_support_state(context)

        keyboard = [
            [
                InlineKeyboardButton("‚ö°Ô∏è Valorant", callback_data="sup_game_valorant"),
                InlineKeyboardButton("üî´ CS:GO", callback_data="sup_game_csgo")
            ],
            [
                InlineKeyboardButton("üéØ League of Legends", callback_data="sup_game_lol"),
                InlineKeyboardButton("üéÆ Fortnite", callback_data="sup_game_fortnite")
            ],
            [
                InlineKeyboardButton("üèÜ Apex Legends", callback_data="sup_game_apex"),
                InlineKeyboardButton("üåç GTA V Online", callback_data="sup_game_gta")
            ],
            [
                InlineKeyboardButton("üì± Mobile Games", callback_data="sup_game_mobile"),
                InlineKeyboardButton("üé™ Outro jogo", callback_data="sup_game_other")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è Voltar", callback_data="sup_back"),
                InlineKeyboardButton("‚ùå Cancelar", callback_data="sup_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        progress = get_progress_bar(2)
        message = (
            f"üéÆ **SUPORTE GAMER ONCABO**\n\n"
            f"‚úÖ Categoria: {state['category_name']}\n\n"
            f"{progress} - Jogo Afetado\n\n"
            f"Qual jogo est√° com problema?"
        )

        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _show_category_step(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Mostra etapa de sele√ß√£o de categoria."""
        keyboard = [
            [
                InlineKeyboardButton("üåê Conectividade/Ping", callback_data="sup_cat_connectivity"),
                InlineKeyboardButton("‚ö° Performance/FPS", callback_data="sup_cat_performance")
            ],
            [
                InlineKeyboardButton("üéÆ Problemas no Jogo", callback_data="sup_cat_game_issues"),
                InlineKeyboardButton("üíª Configura√ß√£o", callback_data="sup_cat_configuration")
            ],
            [
                InlineKeyboardButton("üìû Outros", callback_data="sup_cat_others")
            ],
            [
                InlineKeyboardButton("‚ùå Cancelar", callback_data="sup_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        progress = get_progress_bar(1)
        message = (
            f"üéÆ **SUPORTE GAMER ONCABO**\n\n"
            f"{progress} - Categoria do Problema\n\n"
            f"Selecione a categoria que melhor descreve seu problema:"
        )

        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _handle_support_game(
        self,
        query,
        context: ContextTypes.DEFAULT_TYPE,
        callback_data: str
    ) -> None:
        """Processa sele√ß√£o de jogo."""
        game_key = callback_data.replace("sup_game_", "")

        game_names = {
            "valorant": "‚ö°Ô∏è Valorant",
            "csgo": "üî´ CS:GO",
            "lol": "üéØ League of Legends",
            "fortnite": "üéÆ Fortnite",
            "apex": "üèÜ Apex Legends",
            "gta": "üåç GTA V Online",
            "mobile": "üì± Mobile Games",
            "other": "üé™ Outro jogo"
        }

        state = get_support_state(context)
        state['game'] = game_key
        state['game_name'] = game_names.get(game_key, "Outro")
        state['state'] = SupportState.TIMING
        state['current_step'] = 3

        await self._show_timing_step(query, context)
        logger.info(f"Usu√°rio {query.from_user.id} selecionou jogo: {game_key}")

    async def _show_timing_step(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Mostra etapa de sele√ß√£o de timing."""
        state = get_support_state(context)

        keyboard = [
            [
                InlineKeyboardButton("üî¥ Agora/Hoje", callback_data="sup_timing_now"),
                InlineKeyboardButton("üìÖ Ontem", callback_data="sup_timing_yesterday")
            ],
            [
                InlineKeyboardButton("üìÜ Esta Semana", callback_data="sup_timing_week"),
                InlineKeyboardButton("üóìÔ∏è Semana Passada", callback_data="sup_timing_lastweek")
            ],
            [
                InlineKeyboardButton("‚è∞ H√° Muito Tempo", callback_data="sup_timing_longtime"),
                InlineKeyboardButton("‚ôæÔ∏è Sempre Foi Assim", callback_data="sup_timing_always")
            ],
            [
                InlineKeyboardButton("‚óÄÔ∏è Voltar", callback_data="sup_back"),
                InlineKeyboardButton("‚ùå Cancelar", callback_data="sup_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        progress = get_progress_bar(3)
        message = (
            f"üéÆ **SUPORTE GAMER ONCABO**\n\n"
            f"‚úÖ Categoria: {state['category_name']}\n"
            f"‚úÖ Jogo: {state['game_name']}\n\n"
            f"{progress} - Quando Come√ßou?\n\n"
            f"Quando voc√™ percebeu esse problema pela primeira vez?"
        )

        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _handle_support_timing(
        self,
        query,
        context: ContextTypes.DEFAULT_TYPE,
        callback_data: str
    ) -> None:
        """Processa sele√ß√£o de timing."""
        timing_key = callback_data.replace("sup_timing_", "")

        timing_names = {
            "now": "üî¥ Agora/Hoje",
            "yesterday": "üìÖ Ontem",
            "week": "üìÜ Esta Semana",
            "lastweek": "üóìÔ∏è Semana Passada",
            "longtime": "‚è∞ H√° Muito Tempo",
            "always": "‚ôæÔ∏è Sempre Foi Assim"
        }

        state = get_support_state(context)
        state['timing'] = timing_key
        state['timing_name'] = timing_names.get(timing_key, "N√£o informado")
        state['state'] = SupportState.DESCRIPTION
        state['current_step'] = 4

        # Remove o teclado e pede descri√ß√£o
        progress = get_progress_bar(4)
        message = (
            f"üéÆ **SUPORTE GAMER ONCABO**\n\n"
            f"‚úÖ Categoria: {state['category_name']}\n"
            f"‚úÖ Jogo: {state['game_name']}\n"
            f"‚úÖ Quando come√ßou: {state['timing_name']}\n\n"
            f"{progress} - Detalhes do Problema\n\n"
            f"üìù Agora me conte com detalhes sobre o problema:\n\n"
            f"üí° **Dicas do que incluir:**\n"
            f"‚Ä¢ O que exatamente est√° acontecendo?\n"
            f"‚Ä¢ Qual √© o sintoma (lag, ping alto, desconex√µes)?\n"
            f"‚Ä¢ Em qual servidor/regi√£o voc√™ joga?\n"
            f"‚Ä¢ J√° tentou reiniciar o roteador?\n"
            f"‚Ä¢ Outros dispositivos t√™m o mesmo problema?\n\n"
            f"‚úçÔ∏è **Digite sua mensagem** explicando o problema em detalhes:"
        )

        await query.edit_message_text(
            message,
            parse_mode='Markdown'
        )

        logger.info(f"Usu√°rio {query.from_user.id} selecionou timing: {timing_key}")

    async def _show_attachments_step(self, query_or_message, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Mostra etapa de anexos opcionais."""
        state = get_support_state(context)
        attachments_count = len(state.get('attachments', []))

        keyboard = [
            [InlineKeyboardButton("‚è≠Ô∏è Pular Anexos", callback_data="sup_att_skip")],
            [InlineKeyboardButton("‚û°Ô∏è Continuar", callback_data="sup_att_continue")],
            [
                InlineKeyboardButton("‚óÄÔ∏è Voltar", callback_data="sup_back"),
                InlineKeyboardButton("‚ùå Cancelar", callback_data="sup_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        progress = get_progress_bar(5)
        message = (
            f"üéÆ **SUPORTE GAMER ONCABO**\n\n"
            f"‚úÖ Categoria: {state['category_name']}\n"
            f"‚úÖ Jogo: {state['game_name']}\n"
            f"‚úÖ Quando come√ßou: {state['timing_name']}\n"
            f"‚úÖ Descri√ß√£o: \"{state['description'][:50]}...\"\n\n"
            f"{progress} - Anexos (Opcional)\n\n"
            f"üìé **Voc√™ pode enviar at√© 3 imagens:**\n"
            f"‚Ä¢ Screenshot do ping in-game\n"
            f"‚Ä¢ Foto do resultado de teste de velocidade\n"
            f"‚Ä¢ Print de tela com erro\n\n"
            f"Anexos enviados: **{attachments_count}/3**\n\n"
            f"üì∑ Envie suas fotos agora ou clique em **Pular Anexos** para continuar."
        )

        # Verifica se √© query ou message
        if hasattr(query_or_message, 'edit_message_text'):
            await query_or_message.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query_or_message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

    async def _handle_support_attachment_action(
        self,
        query,
        context: ContextTypes.DEFAULT_TYPE,
        callback_data: str
    ) -> None:
        """Processa a√ß√µes de anexos."""
        if callback_data == "sup_att_skip" or callback_data == "sup_att_continue":
            state = get_support_state(context)
            state['state'] = SupportState.CONFIRMATION
            state['current_step'] = 6
            await self._show_confirmation_step(query, context)

    async def _show_confirmation_step(self, query, context: ContextTypes.DEFAULT_TYPE) -> None:
        """Mostra etapa de confirma√ß√£o."""
        state = get_support_state(context)
        attachments_count = len(state.get('attachments', []))

        keyboard = [
            [InlineKeyboardButton("‚úÖ Confirmar e Criar", callback_data="sup_confirm_create")],
            [InlineKeyboardButton("‚úèÔ∏è Editar", callback_data="sup_edit_menu")],
            [InlineKeyboardButton("‚ùå Cancelar", callback_data="sup_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        progress = get_progress_bar(6)

        # Limita descri√ß√£o a 200 caracteres para exibi√ß√£o
        description = state['description']
        desc_preview = description[:200] + ("..." if len(description) > 200 else "")

        message = (
            f"üéÆ **SUPORTE GAMER ONCABO**\n\n"
            f"{progress} - Confirma√ß√£o\n\n"
            f"üìã **RESUMO DO SEU CHAMADO:**\n\n"
            f"üî∏ **Categoria:** {state['category_name']}\n"
            f"üî∏ **Jogo:** {state['game_name']}\n"
            f"üî∏ **Quando come√ßou:** {state['timing_name']}\n"
            f"üî∏ **Anexos:** {attachments_count} arquivo(s)\n\n"
            f"üìù **Descri√ß√£o:**\n{desc_preview}\n\n"
            f"‚úÖ Est√° tudo correto? **Confirma a cria√ß√£o do chamado?**"
        )

        await query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def _handle_support_confirmation(
        self,
        query,
        context: ContextTypes.DEFAULT_TYPE,
        callback_data: str
    ) -> None:
        """Processa confirma√ß√£o de cria√ß√£o do ticket."""
        if callback_data == "sup_confirm_create":
            await self._create_ticket_from_support_flow(query, context)

    async def _handle_support_edit(
        self,
        query,
        context: ContextTypes.DEFAULT_TYPE,
        callback_data: str
    ) -> None:
        """Processa edi√ß√£o de campos."""
        if callback_data == "sup_edit_menu":
            # Mostra menu de edi√ß√£o
            keyboard = [
                [InlineKeyboardButton("üìÅ Editar Categoria", callback_data="sup_edit_category")],
                [InlineKeyboardButton("üéÆ Editar Jogo", callback_data="sup_edit_game")],
                [InlineKeyboardButton("üìÖ Editar Quando Come√ßou", callback_data="sup_edit_timing")],
                [InlineKeyboardButton("üìù Editar Descri√ß√£o", callback_data="sup_edit_description")],
                [InlineKeyboardButton("üìé Editar Anexos", callback_data="sup_edit_attachments")],
                [InlineKeyboardButton("‚óÄÔ∏è Voltar", callback_data="sup_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "‚úèÔ∏è **O que deseja editar?**\n\nSelecione o campo que deseja alterar:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        elif callback_data == "sup_edit_category":
            state = get_support_state(context)
            state['state'] = SupportState.CATEGORY
            state['current_step'] = 1
            await self._show_category_step(query, context)
        elif callback_data == "sup_edit_game":
            state = get_support_state(context)
            state['state'] = SupportState.GAME
            state['current_step'] = 2
            await self._show_game_step(query, context)
        elif callback_data == "sup_edit_timing":
            state = get_support_state(context)
            state['state'] = SupportState.TIMING
            state['current_step'] = 3
            await self._show_timing_step(query, context)
        elif callback_data == "sup_edit_description":
            state = get_support_state(context)
            state['state'] = SupportState.DESCRIPTION
            state['current_step'] = 4

            await query.edit_message_text(
                "üìù Digite a nova descri√ß√£o do problema:",
                parse_mode='Markdown'
            )
        elif callback_data == "sup_edit_attachments":
            state = get_support_state(context)
            state['state'] = SupportState.ATTACHMENTS
            state['current_step'] = 5
            await self._show_attachments_step(query, context)

    async def _create_ticket_from_support_flow(
        self,
        query,
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Cria ticket a partir do fluxo de suporte."""
        state = get_support_state(context)
        user = query.from_user

        try:
            # Gera protocolo
            now = datetime.now()
            protocol = f"TKT-{now.strftime('%Y%m%d')}-{user.id % 10000:04d}"

            # Mensagem de sucesso
            success_message = (
                f"üéâ **CHAMADO CRIADO COM SUCESSO!**\n\n"
                f"üìã **Protocolo:** `{protocol}`\n"
                f"üìÖ **Criado em:** {now.strftime('%d/%m/%Y √†s %H:%M')}\n"
                f"üìä **Status:** Aguardando Atendimento\n\n"
                f"‚úÖ **Seu chamado foi registrado e nossa equipe t√©cnica j√° foi notificada!**\n\n"
                f"üìû **Pr√≥ximos passos:**\n"
                f"‚Ä¢ Voc√™ receber√° atualiza√ß√µes aqui no Telegram\n"
                f"‚Ä¢ Tempo de resposta: at√© 24h √∫teis\n"
                f"‚Ä¢ Mantenha o protocolo para acompanhamento\n\n"
                f"üîç **Protocolo para consulta:** `{protocol}`\n\n"
                f"üí¨ Acompanhe as respostas no grupo, t√≥pico **Suporte Gamer**!"
            )

            await query.edit_message_text(
                success_message,
                parse_mode='Markdown'
            )

            # Envia notifica√ß√£o ao t√≥pico do grupo
            try:
                notification = (
                    f"üé´ **NOVO CHAMADO ABERTO**\n\n"
                    f"üìã **Protocolo:** `{protocol}`\n"
                    f"üë§ **Cliente:** @{user.username or user.first_name}\n"
                    f"üî∏ **Categoria:** {state['category_name']}\n"
                    f"üéÆ **Jogo:** {state['game_name']}\n\n"
                    f"Nossa equipe t√©cnica j√° est√° analisando! üîß"
                )

                await context.bot.send_message(
                    chat_id=int(TELEGRAM_GROUP_ID),
                    message_thread_id=int(SUPPORT_TOPIC_ID),
                    text=notification,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Erro ao enviar notifica√ß√£o de ticket ao grupo: {e}")

            # Limpa estado
            clear_support_state(context)

            logger.info(f"Ticket {protocol} criado para usu√°rio {user.id}")

        except Exception as e:
            logger.error(f"Erro ao criar ticket: {e}")
            await query.edit_message_text(
                "‚ùå Erro ao criar chamado. Por favor, tente novamente com /suporte",
                parse_mode='Markdown'
            )

    def _is_admin(self, user_id: int) -> bool:
        """Verifica se usu√°rio √© administrador."""
        # TODO: Implementar verifica√ß√£o real de admin
        admin_list = [123456789, 987654321]  # IDs de exemplo
        return user_id in admin_list

    async def handle_error(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """Processa erros gerais."""
        logger.error(f"Erro no bot: {context.error}")

        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå Ocorreu um erro inesperado. Tente novamente mais tarde."
                )
            except:
                pass  # Evita loop de erros