import logging
from telegram import Update, ChatMemberUpdated, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ChatMemberHandler, CallbackQueryHandler

# Importa o servi√ßo de usu√°rio para ser usado no handler
from src.sentinela.services import user_service
from src.sentinela.services.welcome_service import handle_new_member, handle_rules_button, should_bot_respond_in_topic
from src.sentinela.services.topics_service import topics_service
from src.sentinela.services.topics_discovery import scan_group_for_topics, get_group_real_info
from src.sentinela.services.cpf_verification_service import CPFVerificationService

# Importa sistema de controle de acesso
from src.sentinela.core.access_control import require_access, require_command_permission, AccessLevel

logger = logging.getLogger(__name__)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /help - Mostra comandos dispon√≠veis baseados no n√≠vel de acesso do usu√°rio.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID
    from src.sentinela.core.access_control import PermissionManager, AccessLevel

    user = update.effective_user
    chat_id = update.effective_chat.id

    # S√≥ funciona em chat privado
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /help ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /help recebido de {user.username} (ID: {user.id})")

    try:
        # Obt√©m n√≠vel de acesso do usu√°rio
        user_level = PermissionManager.get_user_access_level(user.id)
        user_level_display = PermissionManager.get_access_level_display(user_level)
        available_commands = PermissionManager.get_available_commands(user.id)

        # Descri√ß√µes dos comandos
        command_descriptions = {
            "start": "Inicia verifica√ß√£o de CPF e acesso ao sistema",
            "status": "Consulta status dos seus atendimentos",
            "suporte": "Abre um novo chamado de suporte",
            "help": "Mostra esta lista de comandos dispon√≠veis",

            # Comandos administrativos
            "test_group": "Testa acesso e configura√ß√£o do grupo",
            "topics": "Lista t√≥picos descobertos no grupo",
            "auto_config": "Sugere configura√ß√£o autom√°tica de t√≥picos",
            "test_topics": "Testa configura√ß√£o atual de t√≥picos",
            "scan_topics": "For√ßa descoberta de t√≥picos via API",
            "admin_tickets": "Consulta avan√ßada de tickets (admin)",
            "sync_tickets": "For√ßa sincroniza√ß√£o manual de tickets",
            "health_hubsoft": "Verifica status da integra√ß√£o HubSoft",
            # Comandos de gerenciamento de administradores
            "sync_admins": "Sincroniza administradores do grupo",
            "list_admins": "Lista administradores detectados"
        }

        # Monta mensagem de ajuda
        message = f"üìö <b>COMANDOS DISPON√çVEIS</b>\n\n"
        message += f"üë§ <b>Seu n√≠vel:</b> {user_level_display}\n\n"

        if user_level == AccessLevel.USER:
            message += "üéÆ <b>COMANDOS DE USU√ÅRIO:</b>\n"
        elif user_level == AccessLevel.ADMIN:
            message += "üéÆ <b>COMANDOS DE USU√ÅRIO:</b>\n"

        # Lista comandos de usu√°rio comum
        user_commands = ["start", "status", "suporte", "help"]
        for cmd in user_commands:
            if cmd in available_commands:
                description = command_descriptions.get(cmd, "Comando do sistema")
                message += f"‚Ä¢ <code>/{cmd}</code> - {description}\n"

        # Lista comandos administrativos se for admin
        if user_level == AccessLevel.ADMIN:
            admin_commands = [cmd for cmd in available_commands if cmd not in user_commands]
            if admin_commands:
                message += f"\nüëë <b>COMANDOS ADMINISTRATIVOS:</b>\n"
                for cmd in sorted(admin_commands):
                    description = command_descriptions.get(cmd, "Comando administrativo")
                    message += f"‚Ä¢ <code>/{cmd}</code> - {description}\n"

        message += "\n"

        # Adiciona informa√ß√µes contextuais
        if user_level == AccessLevel.USER:
            message += (
                "üí° <b>COMO USAR:</b>\n"
                "1Ô∏è‚É£ Use /start se ainda n√£o verificou seu CPF\n"
                "2Ô∏è‚É£ Use /suporte para abrir chamados\n"
                "3Ô∏è‚É£ Use /status para acompanhar seus tickets\n\n"
                "üéØ <b>Principais funcionalidades:</b>\n"
                "‚Ä¢ Verifica√ß√£o autom√°tica de clientes OnCabo\n"
                "‚Ä¢ Sistema de suporte com formul√°rio inteligente\n"
                "‚Ä¢ Acompanhamento em tempo real de chamados\n"
                "‚Ä¢ Sincroniza√ß√£o autom√°tica com HubSoft"
            )
        elif user_level == AccessLevel.ADMIN:
            message += (
                "üîß <b>RECURSOS ADMINISTRATIVOS:</b>\n"
                "‚Ä¢ Gest√£o de t√≥picos do grupo\n"
                "‚Ä¢ Consulta avan√ßada de tickets\n"
                "‚Ä¢ Sincroniza√ß√£o manual HubSoft\n"
                "‚Ä¢ Monitoramento de sistema\n"
                "‚Ä¢ Health checks e diagn√≥sticos\n\n"
                "üí° Comandos administrativos funcionam apenas em chat privado."
            )

        await update.message.reply_html(message)

    except Exception as e:
        logger.error(f"Erro no comando /help: {e}")
        await update.message.reply_html(
            "‚ùå <b>Erro ao exibir ajuda</b>\n\n"
            "Ocorreu um erro ao carregar a lista de comandos. Tente novamente."
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para o comando /start. Envia uma mensagem de boas-vindas OnCabo Gamer.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID

    user = update.effective_user
    chat_id = update.effective_chat.id

    # Ignora comandos no grupo
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /start ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /start recebido de {user.username} (ID: {user.id}) no chat privado")
    await update.message.reply_html(
        f"üéÆ Ol√°, {user.mention_html()}!\n\n"
        f"üî• Bem-vindo √† <b>OnCabo</b>! üî•\n\n"
        f"Obrigado por escolher o <b>Plano Gamer</b> - a internet que todo gamer merece! üöÄ\n\n"
        f"üéØ Para acessar nossa <b>Comunidade Gamer exclusiva</b> no Telegram, preciso verificar seu contrato.\n\n"
        f"üìù Por favor, envie seu <b>CPF</b> para validarmos seu acesso:"
    )

@require_command_permission("test_group")
async def test_group(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para o comando /test_group. Testa o acesso ao grupo configurado.
    Funciona apenas em chat privado.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID
    from telegram import Bot

    user = update.effective_user
    chat_id = update.effective_chat.id

    # Ignora comandos no grupo
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /test_group ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /test_group recebido de {user.username} (ID: {user.id}) no chat privado")

    try:
        bot = Bot(token=context.bot.token)

        # Tenta obter informa√ß√µes do grupo
        chat_info = await bot.get_chat(TELEGRAM_GROUP_ID)

        response = (
            f"‚úÖ TESTE DE GRUPO - SUCESSO\n\n"
            f"üÜî ID: {TELEGRAM_GROUP_ID}\n"
            f"üìù Nome: {chat_info.title}\n"
            f"üë• Tipo: {chat_info.type}\n"
            f"üìä Membros: {chat_info.get_member_count()}\n\n"
            f"üîß Status: Bot tem acesso ao grupo!"
        )

    except Exception as e:
        logger.error(f"Erro no teste do grupo: {e}")
        response = (
            f"‚ùå TESTE DE GRUPO - FALHA\n\n"
            f"üÜî ID Configurado: {TELEGRAM_GROUP_ID}\n"
            f"‚ö†Ô∏è Erro: {str(e)}\n\n"
            f"Poss√≠veis solu√ß√µes:\n"
            f"‚Ä¢ Verificar se o ID do grupo est√° correto\n"
            f"‚Ä¢ Adicionar o bot como admin no grupo\n"
            f"‚Ä¢ Conceder permiss√£o 'Convidar usu√°rios'"
        )

    await update.message.reply_text(response)


@require_command_permission("topics")
async def topics_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /topics - Lista todos os t√≥picos descobertos no grupo.
    Funciona apenas em chat privado.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID

    user = update.effective_user
    chat_id = update.effective_chat.id

    # S√≥ funciona em chat privado
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /topics ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /topics recebido de {user.username} (ID: {user.id})")

    try:
        # Gera lista de t√≥picos
        topics_list = await topics_service.format_topics_list()

        await update.message.reply_html(topics_list)

    except Exception as e:
        logger.error(f"Erro no comando topics: {e}")
        await update.message.reply_text(
            "‚ùå Erro ao listar t√≥picos. Verifique os logs do bot."
        )

@require_command_permission("auto_config")
async def auto_config_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /auto_config - Sugere configura√ß√µes autom√°ticas de t√≥picos.
    Funciona apenas em chat privado.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID

    user = update.effective_user
    chat_id = update.effective_chat.id

    # S√≥ funciona em chat privado
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /auto_config ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /auto_config recebido de {user.username} (ID: {user.id})")

    try:
        # Gera configura√ß√£o autom√°tica
        config_suggestions = await topics_service.auto_configure_topics()

        await update.message.reply_html(config_suggestions)

    except Exception as e:
        logger.error(f"Erro no comando auto_config: {e}")
        await update.message.reply_text(
            "‚ùå Erro ao gerar configura√ß√£o autom√°tica. Verifique os logs do bot."
        )

@require_command_permission("test_topics")
async def test_topics_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /test_topics - Testa a configura√ß√£o atual de t√≥picos.
    Funciona apenas em chat privado.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID, RULES_TOPIC_ID, WELCOME_TOPIC_ID

    user = update.effective_user
    chat_id = update.effective_chat.id

    # S√≥ funciona em chat privado
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /test_topics ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /test_topics recebido de {user.username} (ID: {user.id})")

    try:
        message = "üß™ <b>TESTE DE CONFIGURA√á√ÉO DE T√ìPICOS</b>\n\n"

        # Verifica configura√ß√µes atuais
        message += "üìã <b>Configura√ß√£o Atual:</b>\n"
        message += f"‚Ä¢ Grupo ID: <code>{TELEGRAM_GROUP_ID}</code>\n"
        message += f"‚Ä¢ T√≥pico Regras: <code>{RULES_TOPIC_ID or 'N√£o configurado'}</code>\n"
        message += f"‚Ä¢ T√≥pico Boas-vindas: <code>{WELCOME_TOPIC_ID or 'N√£o configurado'}</code>\n\n"

        # Busca t√≥picos descobertos
        topics = await topics_service.get_all_topics()
        message += f"üîç <b>T√≥picos Descobertos:</b> {len(topics)}\n\n"

        # Valida√ß√£o
        rules_found = False
        welcome_found = False

        if RULES_TOPIC_ID:
            for topic in topics:
                if str(topic['id']) == str(RULES_TOPIC_ID):
                    rules_found = True
                    message += f"‚úÖ T√≥pico Regras encontrado: {topic['name']}\n"
                    break
            if not rules_found:
                message += f"‚ùå T√≥pico Regras (ID: {RULES_TOPIC_ID}) n√£o encontrado\n"

        if WELCOME_TOPIC_ID:
            for topic in topics:
                if str(topic['id']) == str(WELCOME_TOPIC_ID):
                    welcome_found = True
                    message += f"‚úÖ T√≥pico Boas-vindas encontrado: {topic['name']}\n"
                    break
            if not welcome_found:
                message += f"‚ùå T√≥pico Boas-vindas (ID: {WELCOME_TOPIC_ID}) n√£o encontrado\n"

        message += "\n"

        # Status geral
        if (not RULES_TOPIC_ID and not WELCOME_TOPIC_ID):
            message += "‚ö†Ô∏è <b>Status:</b> Nenhum t√≥pico configurado\n"
            message += "üí° Use /auto_config para sugest√µes autom√°ticas"
        elif rules_found or welcome_found:
            message += "‚úÖ <b>Status:</b> Configura√ß√£o funcionando\n"
            message += "üéØ Bot responder√° apenas nos t√≥picos configurados"
        else:
            message += "‚ùå <b>Status:</b> IDs configurados mas t√≥picos n√£o encontrados\n"
            message += "üîß Verifique os IDs ou use /auto_config"

        await update.message.reply_html(message)

    except Exception as e:
        logger.error(f"Erro no comando test_topics: {e}")
        await update.message.reply_text(
            "‚ùå Erro ao testar configura√ß√£o. Verifique os logs do bot."
        )

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /status - Consulta status dos atendimentos do cliente com sincroniza√ß√£o autom√°tica.
    Funciona em chat privado e no t√≥pico de suporte do grupo.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID, SUPPORT_TOPIC_ID, HUBSOFT_ENABLED
    from src.sentinela.clients.db_client import get_user_data
    from src.sentinela.services.hubsoft_sync_service import hubsoft_sync_service
    from datetime import datetime

    # Importa HubSoft apenas se habilitado
    if HUBSOFT_ENABLED:
        from src.sentinela.integrations.hubsoft.atendimento import hubsoft_atendimento_client
        from src.sentinela.integrations.hubsoft.config import get_status_display, format_protocol

    user = update.effective_user
    chat_id = update.effective_chat.id
    message_thread_id = getattr(update.message, 'message_thread_id', None)
    is_group_request = False

    # Se for no grupo, verifica se √© no t√≥pico de suporte
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        if not SUPPORT_TOPIC_ID or str(message_thread_id) != str(SUPPORT_TOPIC_ID):
            logger.info(f"Comando /status ignorado - t√≥pico incorreto {message_thread_id}")
            return

        # Responde no grupo informando que ser√° enviado no privado
        await update.message.reply_html(
            f"üë§ {user.mention_html()}\n\n"
            "üì± <b>Consultando seus atendimentos...</b>\n\n"
            "üîí As informa√ß√µes ser√£o enviadas no <b>chat privado</b> por quest√µes de privacidade.\n\n"
            "üí¨ Verifique suas mensagens privadas comigo!"
        )

        # Marca que foi requisi√ß√£o do grupo
        is_group_request = True

    logger.info(f"Comando /status recebido de {user.username} (ID: {user.id})")

    # Mostra feedback de carregamento
    if not is_group_request:
        loading_message = await update.message.reply_html("üîç <b>Consultando seus atendimentos...</b>")
    else:
        loading_message = None

    async def send_status_message(content: str):
        """Envia mensagem do status - no privado se foi solicitado do grupo"""
        if is_group_request:
            from src.sentinela.core.config import TELEGRAM_TOKEN
            from telegram import Bot
            bot = Bot(token=TELEGRAM_TOKEN)
            await bot.send_message(chat_id=user.id, text=content, parse_mode='HTML')
        else:
            # Remove mensagem de carregamento e envia resultado
            if loading_message:
                try:
                    await loading_message.delete()
                except:
                    pass
            await update.message.reply_html(content)

    try:
        # Busca dados do usu√°rio
        user_data = get_user_data(user.id)
        if not user_data:
            await send_status_message(
                "‚ùå <b>Cliente n√£o encontrado</b>\n\n"
                "Para consultar seus atendimentos, voc√™ precisa ser um cliente OnCabo verificado.\n\n"
                "üìù Use /start para validar seu CPF."
            )
            return

        client_cpf = user_data.get('cpf')
        if not client_cpf:
            await send_status_message(
                "‚ùå <b>CPF n√£o encontrado</b>\n\n"
                "N√£o foi poss√≠vel localizar seu CPF no sistema.\n\n"
                "üìù Use /start para revalidar seus dados."
            )
            return

        # Busca IDs dos atendimentos criados pelo bot para este usu√°rio
        from src.sentinela.clients.db_client import get_user_bot_created_hubsoft_ids
        bot_created_ids = get_user_bot_created_hubsoft_ids(user.id)

        if not bot_created_ids:
            await send_status_message(
                "‚úÖ <b>Nenhum atendimento em aberto</b>\n\n"
                "üéÆ Voc√™ n√£o possui atendimentos em aberto no momento.\n\n"
                "üìû Use /suporte para abrir um novo chamado quando precisar."
            )
            return

        # === NOVA L√ìGICA COM SINCRONIZA√á√ÉO ===

        # 1. Primeiro verifica se HubSoft est√° online e faz health check
        hubsoft_online = False
        if HUBSOFT_ENABLED:
            try:
                hubsoft_online = await hubsoft_sync_service.check_hubsoft_health()
                if hubsoft_online:
                    # Se HubSoft est√° online, tenta sincronizar status dos tickets do usu√°rio
                    await hubsoft_sync_service.sync_all_active_tickets_status()
                    logger.info(f"Sincroniza√ß√£o autom√°tica de status executada para consulta de {user.username}")
                else:
                    logger.warning("HubSoft offline durante consulta de status")
            except Exception as e:
                logger.error(f"Erro durante verifica√ß√£o de health/sincroniza√ß√£o: {e}")
                hubsoft_online = False

        # 2. Busca atendimentos com dados locais atualizados
        atendimentos = []
        sync_indicators = {}  # Para indicadores visuais de sincroniza√ß√£o

        if HUBSOFT_ENABLED and hubsoft_online:
            try:
                # Busca todos os atendimentos no HubSoft e filtra apenas os criados pelo bot
                all_atendimentos = await hubsoft_atendimento_client.get_client_atendimentos(
                    client_cpf=client_cpf,
                    apenas_pendente=True  # Apenas atendimentos ativos
                )

                # Filtra apenas atendimentos criados pelo bot e adiciona indicadores
                for atendimento in all_atendimentos:
                    atendimento_id = str(atendimento.get('id', ''))
                    if atendimento_id in bot_created_ids:
                        atendimentos.append(atendimento)
                        sync_indicators[atendimento_id] = {
                            'is_synced': True,
                            'source': 'hubsoft',
                            'last_sync': datetime.now().strftime("%H:%M")
                        }

            except Exception as e:
                logger.error(f"Erro ao consultar HubSoft: {e}")
                # Fallback para dados locais quando HubSoft falha
                from src.sentinela.clients.db_client import get_all_active_tickets_with_hubsoft_id
                local_tickets = get_all_active_tickets_with_hubsoft_id()
                for ticket in local_tickets:
                    if ticket['user_id'] == user.id:
                        sync_indicators[str(ticket['id'])] = {
                            'is_synced': False,
                            'source': 'local_fallback',
                            'error': 'HubSoft temporariamente indispon√≠vel'
                        }

                await send_status_message(
                    "‚ö†Ô∏è <b>Sistema temporariamente indispon√≠vel</b>\n\n"
                    "üéÆ Seus atendimentos existem e est√£o seguros!\n\n"
                    "üîÑ Tente novamente em alguns minutos.\n\n"
                    "üí° <b>N√£o se preocupe:</b> Tudo ser√° atualizado automaticamente quando o sistema voltar."
                )
                return
        elif HUBSOFT_ENABLED and not hubsoft_online:
            # HubSoft habilitado mas offline - mostra dados locais com indica√ß√£o
            from src.sentinela.clients.db_client import get_all_active_tickets_with_hubsoft_id
            local_tickets = get_all_active_tickets_with_hubsoft_id()

            offline_count = 0
            for ticket in local_tickets:
                if ticket['user_id'] == user.id:
                    offline_count += 1
                    sync_indicators[str(ticket['id'])] = {
                        'is_synced': False,
                        'source': 'local_offline',
                        'last_attempt': ticket.get('last_sync_attempt', 'Nunca')
                    }

            await send_status_message(
                f"üîÑ <b>Verificando seus atendimentos...</b>\n\n"
                f"üéÆ Voc√™ possui {offline_count} atendimento(s) em acompanhamento.\n\n"
                f"üì∂ <b>Status do sistema:</b> Atualiza√ß√£o temporariamente indispon√≠vel\n\n"
                f"‚úÖ <b>Seus dados est√£o seguros!</b> Estamos trabalhando para manter "
                f"tudo atualizado automaticamente.\n\n"
                f"üìû Para abrir um novo chamado, use o comando /suporte."
            )
            return
        else:
            # HubSoft desabilitado - mostra apenas info local
            await send_status_message(
                "‚ÑπÔ∏è <b>Consultando seus atendimentos...</b>\n\n"
                f"üéÆ Voc√™ possui {len(bot_created_ids)} atendimento(s) registrado(s).\n\n"
                "üí° <b>Observa√ß√£o:</b> Seus tickets est√£o salvos e sendo acompanhados.\n\n"
                "üìû Para abrir um novo chamado, use o comando /suporte."
            )
            return

        if not atendimentos:
            await send_status_message(
                "‚úÖ <b>Atendimentos finalizados</b>\n\n"
                "üéÆ Seus atendimentos j√° foram finalizados ou n√£o est√£o mais pendentes.\n\n"
                "üìû Use /suporte para abrir um novo chamado quando precisar."
            )
            return

        # Monta mensagem com lista de atendimentos e indicadores simples
        status_icon = "üü¢" if hubsoft_online else "üîÑ"

        message = f"{status_icon} <b>SEUS ATENDIMENTOS ONCABO</b>\n\n"
        if hubsoft_online:
            message += f"‚úÖ <b>Status:</b> Atualizado em tempo real\n"
        else:
            message += f"üîÑ <b>Status:</b> Aguardando atualiza√ß√£o\n"
        message += f"üìä <b>Total:</b> {len(atendimentos)} atendimento(s)\n\n"

        for i, atendimento in enumerate(atendimentos[:5], 1):  # M√°ximo 5 atendimentos
            atendimento_id = str(atendimento.get('id', ''))

            # Usa protocolo oficial da API ou formata se n√£o houver
            if HUBSOFT_ENABLED:
                protocol = atendimento.get('protocolo') or format_protocol(atendimento.get('id'))
            else:
                protocol = f"LOC{atendimento.get('id', 0):06d}"
            titulo = atendimento.get('titulo') or atendimento.get('tipo_atendimento', 'Suporte Gaming')
            data_cadastro = atendimento.get('data_cadastro', '')

            # Formata data
            try:
                if data_cadastro:
                    dt = datetime.fromisoformat(data_cadastro.replace('Z', '+00:00'))
                    data_formatada = dt.strftime("%d/%m/%Y √†s %H:%M")
                else:
                    data_formatada = "Data n√£o dispon√≠vel"
            except:
                data_formatada = "Data n√£o dispon√≠vel"

            # Status com emoji
            status_info = atendimento.get('status_display', {})
            status_emoji = status_info.get('emoji', '‚ùì')
            status_name = status_info.get('name', 'Status Desconhecido')
            status_message = status_info.get('message', 'Sem informa√ß√µes')

            # Indicador simples de status
            sync_info = sync_indicators.get(atendimento_id, {})
            if sync_info.get('is_synced', False):
                sync_badge = "‚úÖ"
            else:
                sync_badge = "üîÑ"

            message += f"{sync_badge} <b>{protocol}</b> - {titulo[:30]}{'...' if len(titulo) > 30 else ''}\n"
            message += f"{status_emoji} <b>Status:</b> {status_name}\n"
            message += f"üìÖ <b>Aberto:</b> {data_formatada}\n"
            message += f"üí¨ {status_message}\n\n"

        # Adiciona rodap√©
        if len(atendimentos) > 5:
            message += f"‚ûï <i>E mais {len(atendimentos) - 5} atendimentos...</i>\n\n"

        # Rodap√© simples e claro
        if hubsoft_online:
            message += (
                "‚úÖ <b>Tudo atualizado!</b> Informa√ß√µes em tempo real.\n\n"
                "üìû Para novo atendimento, use /suporte"
            )
        else:
            message += (
                "üîÑ <b>Verificando atualiza√ß√µes...</b> Seus dados est√£o seguros.\n\n"
                "üìû Para novo atendimento, use /suporte"
            )

        await send_status_message(message)

    except Exception as e:
        logger.error(f"Erro ao processar comando /status para {user.username}: {e}")
        await send_status_message(
            "‚ùå <b>Erro tempor√°rio</b>\n\n"
            "N√£o foi poss√≠vel consultar seus atendimentos no momento.\n\n"
            "üîÑ Tente novamente em alguns minutos."
        )

async def suporte_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /suporte - Inicia processo de abertura de chamado de suporte.
    Funciona tanto no grupo (t√≥pico espec√≠fico) quanto em chat privado.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID, SUPPORT_TOPIC_ID
    from src.sentinela.services.support_service import handle_support_request

    user = update.effective_user
    chat_id = update.effective_chat.id
    message_thread_id = getattr(update.message, 'message_thread_id', None)

    logger.info(f"Comando /suporte recebido de {user.username} (ID: {user.id}) no chat {chat_id}")

    # Se for no grupo, verifica se √© no t√≥pico de suporte
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        if not SUPPORT_TOPIC_ID or str(message_thread_id) != str(SUPPORT_TOPIC_ID):
            logger.info(f"Comando /suporte ignorado - t√≥pico incorreto {message_thread_id}")
            return

        # Responde no grupo e inicia no privado
        await update.message.reply_html(
            f"üéÆ <b>{user.mention_html()}</b>, estou te chamando no privado para abrir seu chamado de suporte!\n\n"
            f"üì± Verifique suas mensagens privadas comigo para preencher o formul√°rio."
        )

    # Processa a solicita√ß√£o de suporte
    await handle_support_request(user.id, user.username, user.mention_html())

@require_command_permission("scan_topics")
async def scan_topics_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /scan_topics - For√ßa descoberta de t√≥picos via API.
    Funciona apenas em chat privado.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID

    user = update.effective_user
    chat_id = update.effective_chat.id

    # S√≥ funciona em chat privado
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /scan_topics ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /scan_topics recebido de {user.username} (ID: {user.id})")

    try:
        await update.message.reply_text("üîç <b>Escaneando grupo...</b>", parse_mode='HTML')

        # Obt√©m info do grupo
        group_info = await get_group_real_info()

        # Escaneia t√≥picos
        topics = await scan_group_for_topics()

        message = f"üìä <b>RESULTADO DO SCAN</b>\n\n"
        message += f"üè† <b>Grupo:</b> {group_info.get('title', 'N/A')}\n"
        message += f"üÜî <b>ID:</b> <code>{group_info.get('id', 'N/A')}</code>\n"
        message += f"üë• <b>Tipo:</b> {group_info.get('type', 'N/A')}\n"
        message += f"üìä <b>Membros:</b> {group_info.get('member_count', 'N/A')}\n"
        message += f"üìã <b>Suporte a t√≥picos:</b> {'‚úÖ' if group_info.get('has_topics') else '‚ùå'}\n\n"

        if topics:
            message += f"üîç <b>T√ìPICOS ENCONTRADOS:</b> {len(topics)}\n\n"
            for i, topic in enumerate(topics, 1):
                message += f"{i}. <b>{topic['name']}</b>\n"
                message += f"   üÜî ID: <code>{topic['id']}</code>\n"
                if topic['last_message']:
                    message += f"   üí¨ √öltima msg: {topic['last_message']}...\n"
                message += "\n"

            message += "üîß <b>Para configurar:</b>\n"
            message += "‚Ä¢ Copie o ID desejado\n"
            message += "‚Ä¢ Adicione no .env:\n"
            message += "‚Ä¢ <code>RULES_TOPIC_ID=\"ID_AQUI\"</code>\n"
            message += "‚Ä¢ <code>WELCOME_TOPIC_ID=\"ID_AQUI\"</code>"
        else:
            message += "‚ùå <b>NENHUM T√ìPICO ENCONTRADO</b>\n\n"
            message += "üí° <b>Poss√≠veis motivos:</b>\n"
            message += "‚Ä¢ Grupo n√£o tem t√≥picos configurados\n"
            message += "‚Ä¢ Bot n√£o tem hist√≥rico de mensagens\n"
            message += "‚Ä¢ T√≥picos n√£o t√™m mensagens recentes\n\n"
            message += "üîß <b>Solu√ß√µes:</b>\n"
            message += "‚Ä¢ Crie t√≥picos no grupo\n"
            message += "‚Ä¢ Envie mensagens nos t√≥picos\n"
            message += "‚Ä¢ Use /topics depois de atividade"

        await update.message.reply_html(message)

    except Exception as e:
        logger.error(f"Erro no comando scan_topics: {e}")
        await update.message.reply_text(
            f"‚ùå Erro ao escanear grupo: {str(e)}"
        )

async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para mensagens no grupo - responde apenas em t√≥picos espec√≠ficos.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID

    chat_id = update.effective_chat.id
    message = update.message

    # Verifica se √© no grupo configurado
    if str(chat_id) != str(TELEGRAM_GROUP_ID):
        return

    # Descobre t√≥picos automaticamente (sempre que h√° mensagem no grupo)
    await topics_service.discover_topics_from_messages(update)

    # Verifica se h√° novos membros
    if message.new_chat_members:
        await handle_new_member(update)
        return

    # Verifica se deve responder neste t√≥pico
    message_thread_id = getattr(message, 'message_thread_id', None)
    if not should_bot_respond_in_topic(message_thread_id):
        logger.debug(f"Mensagem ignorada - t√≥pico {message_thread_id} n√£o autorizado")
        return

    # Aqui voc√™ pode adicionar l√≥gica espec√≠fica para responder em t√≥picos
    logger.info(f"Mensagem recebida no t√≥pico autorizado {message_thread_id}")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para callback queries (bot√µes inline).
    """
    from src.sentinela.services.support_service import handle_support_callback

    query = update.callback_query
    user = query.from_user

    logger.info(f"Callback query recebido: {query.data} de {user.username}")

    if query.data.startswith("accept_rules_"):
        await handle_rules_button(update)
    elif query.data.startswith("support_"):
        # Processa bot√µes do formul√°rio de suporte
        support_handled = await handle_support_callback(user.id, query.data, user.username)
        if support_handled:
            await query.answer()  # Confirma o clique
        else:
            await query.answer("Erro ao processar solicita√ß√£o")
    elif query.data.startswith("cpf_duplicate_"):
        await handle_cpf_duplicate_decision(query)
    elif query.data == "cpf_verification_cancel":
        # Cancela verifica√ß√£o de CPF
        await handle_cpf_verification_cancel(query)
    else:
        # Outros bot√µes podem ser adicionados aqui
        await query.answer("Bot√£o n√£o reconhecido")

async def handle_unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para comandos desconhecidos ou n√£o autorizados.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID
    from src.sentinela.core.access_control import PermissionManager

    user = update.effective_user
    chat_id = update.effective_chat.id
    message_text = update.message.text

    # S√≥ funciona em chat privado
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        return

    # Verifica se √© um comando (come√ßa com /)
    if not message_text.startswith('/'):
        return

    # Extrai o nome do comando
    command_parts = message_text.split()
    command_name = command_parts[0][1:]  # Remove o /

    logger.info(f"Comando desconhecido/n√£o autorizado: /{command_name} de {user.username} (ID: {user.id})")

    try:
        # Verifica se o comando existe mas o usu√°rio n√£o tem permiss√£o
        all_commands = set()
        for level_commands in PermissionManager.COMMAND_PERMISSIONS.values():
            all_commands.update(level_commands)

        user_level = PermissionManager.get_user_access_level(user.id)
        user_level_display = PermissionManager.get_access_level_display(user_level)
        available_commands = PermissionManager.get_available_commands(user.id)

        if command_name in all_commands:
            # Comando existe mas usu√°rio n√£o tem permiss√£o
            message = (
                f"üö´ <b>Comando n√£o dispon√≠vel</b>\n\n"
                f"O comando <code>/{command_name}</code> √© restrito para administradores.\n\n"
                f"üí° <b>Seus comandos dispon√≠veis:</b>\n"
            )
            for cmd in sorted(available_commands):
                message += f"‚Ä¢ /{cmd}\n"
            message += f"\nüì± Use /help para mais informa√ß√µes."
        else:
            # Comando n√£o existe
            message = (
                f"‚ùì <b>Comando n√£o encontrado</b>\n\n"
                f"üí° <b>Comandos dispon√≠veis:</b>\n"
            )
            for cmd in sorted(available_commands):
                message += f"‚Ä¢ /{cmd}\n"
            message += f"\nüì± Use /help para mais detalhes."

        await update.message.reply_html(message)

    except Exception as e:
        logger.error(f"Erro ao processar comando desconhecido: {e}")
        await update.message.reply_html(
            f"‚ùå <b>Comando n√£o reconhecido</b>\n\n"
            f"Use /help para ver os comandos dispon√≠veis."
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para mensagens de texto.
    - Primeira intera√ß√£o: Boas-vindas para qualquer mensagem
    - Intera√ß√µes seguintes: Aceita apenas CPF v√°lido
    - Durante formul√°rio de suporte: Processa passos do formul√°rio
    """
    from src.sentinela.utils.cpf_validator import extract_cpf_from_message, is_message_cpf_only
    from src.sentinela.core.config import TELEGRAM_GROUP_ID
    from src.sentinela.clients.db_client import is_first_interaction, mark_user_interacted
    from src.sentinela.services.support_service import handle_support_message

    message_text = update.message.text
    user = update.effective_user
    chat_id = update.effective_chat.id

    # Verifica se √© uma mensagem no grupo - ignora
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Mensagem ignorada no grupo {chat_id}")
        return

    logger.info(f"Mensagem de texto recebida de {user.username} no chat privado.")

    # Verifica se √© parte do formul√°rio de suporte
    support_handled = await handle_support_message(user.id, message_text, user.username)
    if support_handled:
        return  # Mensagem foi processada pelo sistema de suporte

    # Verifica se h√° verifica√ß√£o de CPF pendente
    pending_verification = CPFVerificationService.get_pending_verification(user.id)
    if pending_verification:
        await handle_cpf_verification_response(update, user.id, user.username, message_text)
        return

    # Verifica se √© primeira intera√ß√£o
    if is_first_interaction(user.id):
        logger.info(f"Primeira intera√ß√£o de {user.username} (ID: {user.id})")

        # Verifica se j√° enviou um CPF na primeira mensagem
        cpf = extract_cpf_from_message(message_text)

        if cpf and is_message_cpf_only(message_text):
            # Primeira mensagem J√Å √© um CPF v√°lido - processa direto
            logger.info(f"CPF v√°lido detectado na primeira intera√ß√£o: {user.username}")
            mark_user_interacted(user.id)

            # Processa o CPF imediatamente
            await update.message.reply_html("üîç <b>CPF recebido!</b> Verificando seu contrato, aguarde um momento...")

            response_message = await user_service.process_user_verification(
                cpf=cpf,
                user_id=user.id,
                username=user.username
            )

            await update.message.reply_html(response_message)
            return

        # Se n√£o for CPF v√°lido, envia boas-vindas e marca como interagido
        mark_user_interacted(user.id)

        await update.message.reply_html(
            f"üéÆ Ol√°, {user.mention_html()}!\n\n"
            f"üî• Bem-vindo √† <b>OnCabo</b>! üî•\n\n"
            f"Obrigado por escolher o <b>Plano Gamer</b> - a internet que todo gamer merece! üöÄ\n\n"
            f"üéØ Para acessar nossa <b>Comunidade Gamer exclusiva</b> no Telegram, preciso verificar seu contrato.\n\n"
            f"üìù Por favor, envie seu <b>CPF</b> para validarmos seu acesso:"
        )
        return

    # N√£o √© primeira intera√ß√£o - valida CPF rigorosamente
    cpf = extract_cpf_from_message(message_text)

    if not cpf or not is_message_cpf_only(message_text):
        # N√£o √© um CPF v√°lido - orienta o usu√°rio
        await update.message.reply_html(
            f"‚ùå <b>Formato inv√°lido!</b>\n\n"
            f"üéØ Para acessar a <b>Comunidade Gamer OnCabo</b>, preciso que voc√™ envie <b>apenas seu CPF</b>.\n\n"
            f"üìù <b>Formato aceito:</b>\n"
            f"‚Ä¢ 123.456.789-01\n"
            f"‚Ä¢ 12345678901\n\n"
            f"üîÑ Tente novamente enviando apenas seu CPF:"
        )
        return

    # CPF v√°lido encontrado - processa
    await update.message.reply_html("üîç <b>CPF recebido!</b> Verificando seu contrato, aguarde um momento...")

    # Chama o servi√ßo com os dados do usu√°rio e o CPF
    response_message = await user_service.process_user_verification(
        cpf=cpf,
        user_id=user.id,
        username=user.username
    )

    # Envia a resposta do servi√ßo (sucesso ou falha) de volta para o usu√°rio
    await update.message.reply_html(response_message)

async def handle_cpf_verification_response(update: Update, user_id: int, username: str, message_text: str):
    """Handler para processar respostas de verifica√ß√£o de CPF"""
    try:
        from src.sentinela.utils.cpf_validator import extract_cpf_from_message, is_message_cpf_only

        # Extrai CPF da mensagem
        cpf = extract_cpf_from_message(message_text)

        if not cpf or not is_message_cpf_only(message_text):
            await update.message.reply_html(
                f"‚ùå <b>Formato de CPF inv√°lido!</b>\n\n"
                f"üìù <b>Envie apenas seu CPF:</b>\n"
                f"‚Ä¢ Formato: 12345678901\n"
                f"‚Ä¢ Ou: 123.456.789-01\n\n"
                f"üîÑ Tente novamente:"
            )
            return

        # Mostra mensagem de processamento
        await update.message.reply_html("üîç <b>Verificando CPF...</b> Aguarde um momento...")

        # Processa verifica√ß√£o
        result = await CPFVerificationService.process_cpf_verification(user_id, username, cpf)

        # --- TRATAMENTO DE CPF DUPLICADO ---
        if result.get('reason') == 'duplicate_cpf':
            existing_username = result.get('existing_username', 'N/A')
            existing_user_id = result.get('existing_user_id')

            message = (
                f"‚ö†Ô∏è <b>CPF j√° em uso!</b>\n\n"
                f"Este CPF j√° est√° associado √† conta Telegram: <b>@{existing_username}</b>.\n\n"
                f"Por seguran√ßa, um CPF s√≥ pode estar ligado a uma conta por vez.\n\n"
                f"ü§î <b>O que voc√™ deseja fazer?</b>\n\n"
                f"1Ô∏è‚É£ <b>Usar esta conta (<code>@{username}</code>) e remover a outra?</b>\n"
                f"   - A conta @{existing_username} ser√° removida do grupo.\n"
                f"   - Este CPF ser√° associado a voc√™.\n\n"
                f"2Ô∏è‚É£ <b>Manter a conta antiga (<code>@{existing_username}</code>)?</b>\n"
                f"   - Sua verifica√ß√£o atual ser√° cancelada."
            )

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("1Ô∏è‚É£ Usar esta conta e remover a outra", callback_data=f"confirm_remap:{user_id}:{existing_user_id}:{cpf}:{username}")],
                [InlineKeyboardButton("2Ô∏è‚É£ Cancelar e manter a conta antiga", callback_data="cpf_verification_cancel")]
            ])

            await update.message.reply_html(message, reply_markup=keyboard)
            return

        # --- FIM TRATAMENTO DE CPF DUPLICADO ---

        # Busca dados da verifica√ß√£o para saber o tipo
        verification = CPFVerificationService.get_pending_verification(user_id)
        verification_type = verification['verification_type'] if verification else "auto_checkup"

        # Envia resultado
        await CPFVerificationService.send_verification_result(user_id, result, verification_type)

        # Se foi bem-sucedida e era para suporte, orienta uso do /suporte
        if result['success'] and verification_type == "support_request":
            await update.message.reply_html(
                f"üéÆ <b>Agora voc√™ pode usar o suporte!</b>\n\n"
                f"Digite /suporte para abrir seu chamado."
            )

    except Exception as e:
        logger.error(f"Erro ao processar resposta de verifica√ß√£o de CPF para {user_id}: {e}")
        await update.message.reply_html(
            f"‚ùå <b>Erro interno</b>\n\n"
            f"Ocorreu um erro ao processar seu CPF. Tente novamente mais tarde."
        )

async def handle_remap_confirmation(query: CallbackQuery) -> None:
    """Handler para confirmar a troca de conta associada a um CPF."""
    try:
        await query.answer("Processando sua solicita√ß√£o...")
        
        # Formato: confirm_remap:{new_user_id}:{old_user_id}:{cpf}:{new_username}
        parts = query.data.split(':')
        new_user_id = int(parts[1])
        old_user_id = int(parts[2])
        cpf = parts[3]
        new_username = parts[4]

        # Medida de seguran√ßa: apenas o novo usu√°rio pode confirmar
        if query.from_user.id != new_user_id:
            await query.edit_message_text("‚ùå A√ß√£o n√£o permitida.")
            return

        await query.edit_message_text("üîÑ <b>Processando...</b> Removendo conta antiga e atualizando seus dados.")

        # Chamar o servi√ßo para fazer a troca
        success = await CPFVerificationService.remap_cpf_to_new_user(new_user_id, old_user_id, cpf, new_username)

        if success:
            message = (
                f"‚úÖ <b>Sucesso!</b>\n\n"
                f"O CPF <code>{cpf}</code> agora est√° associado a esta conta.\n\n"
                f"A conta antiga foi removida do grupo para garantir a seguran√ßa."
            )
            await query.edit_message_text(message, parse_mode='HTML')
        else:
            await query.edit_message_text("‚ùå <b>Erro ao processar a troca.</b> Por favor, contate um administrador.", parse_mode='HTML')

    except Exception as e:
        logger.error(f"Erro ao processar a confirma√ß√£o de remap: {e}")
        await query.edit_message_text("‚ùå <b>Erro interno.</b> Tente novamente ou contate um administrador.")

async def handle_cpf_verification_cancel(query):
    """Handler para cancelamento de verifica√ß√£o de CPF"""
    try:
        user_id = query.from_user.id
        username = query.from_user.username

        # Busca verifica√ß√£o pendente
        verification = CPFVerificationService.get_pending_verification(user_id)

        if verification:
            verification_type = verification['verification_type']

            # Marca como cancelada
            CPFVerificationService.complete_verification(
                user_id, False, None, "user_cancelled"
            )

            if verification_type == "support_request":
                message = (
                    f"‚ùå <b>Verifica√ß√£o cancelada</b>\n\n"
                    f"Voc√™ cancelou a verifica√ß√£o de CPF.\n\n"
                    f"üîÑ Para usar o suporte, digite /suporte novamente quando quiser confirmar seus dados."
                )
            else:  # auto_checkup
                message = (
                    f"‚ùå <b>Verifica√ß√£o cancelada</b>\n\n"
                    f"Voc√™ cancelou a verifica√ß√£o de CPF.\n\n"
                    f"‚ö†Ô∏è <b>Aten√ß√£o:</b> Se n√£o confirmar seus dados em 24 horas desde o primeiro aviso, "
                    f"ser√° removido do grupo automaticamente.\n\n"
                    f"üìù Digite seu CPF quando quiser confirmar."
                )

            await query.edit_message_text(message, parse_mode='HTML')
            logger.info(f"Verifica√ß√£o de CPF cancelada pelo usu√°rio {username} (ID: {user_id})")
        else:
            await query.edit_message_text(
                f"‚ùå <b>Nenhuma verifica√ß√£o encontrada</b>\n\n"
                f"N√£o h√° verifica√ß√£o pendente para cancelar.",
                parse_mode='HTML'
            )

        await query.answer("Verifica√ß√£o cancelada")

    except Exception as e:
        logger.error(f"Erro ao cancelar verifica√ß√£o de CPF: {e}")
        await query.answer("Erro ao cancelar verifica√ß√£o")


@require_command_permission("sync_tickets")
async def sync_tickets_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /sync_tickets - For√ßa sincroniza√ß√£o manual de tickets (admin only).
    Funciona apenas em chat privado e para usu√°rios autorizados.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID
    from src.sentinela.services.hubsoft_sync_service import hubsoft_sync_service

    user = update.effective_user
    chat_id = update.effective_chat.id

    # S√≥ funciona em chat privado
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /sync_tickets ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /sync_tickets recebido de {user.username} (ID: {user.id})")

    try:
        # Verifica argumentos
        args = context.args
        sync_type = args[0] if args else "all"

        await update.message.reply_html("üîÑ <b>Iniciando sincroniza√ß√£o...</b>")

        if sync_type == "offline":
            # Sincroniza apenas tickets offline
            result = await hubsoft_sync_service.sync_offline_tickets_to_hubsoft()
        elif sync_type == "status":
            # Sincroniza apenas status de tickets ativos
            result = await hubsoft_sync_service.sync_all_active_tickets_status()
        else:
            # Sincroniza√ß√£o completa (padr√£o)
            await update.message.reply_html("üîÑ Executando sincroniza√ß√£o completa...")

            # Primeiro sincroniza tickets offline
            offline_result = await hubsoft_sync_service.sync_offline_tickets_to_hubsoft()

            # Depois sincroniza status
            status_result = await hubsoft_sync_service.sync_all_active_tickets_status()

            result = {
                "status": "completed",
                "offline_sync": offline_result,
                "status_sync": status_result
            }

        # Formata resposta
        if result.get("status") == "completed":
            if sync_type == "all":
                offline_stats = result.get("offline_sync", {}).get("results", {})
                status_stats = result.get("status_sync", {}).get("results", {})

                message = (
                    f"‚úÖ <b>SINCRONIZA√á√ÉO COMPLETA CONCLU√çDA</b>\n\n"
                    f"üì§ <b>Tickets Offline:</b>\n"
                    f"‚Ä¢ Total processados: {offline_stats.get('total_tickets', 0)}\n"
                    f"‚Ä¢ Sucessos: {offline_stats.get('success_count', 0)}\n"
                    f"‚Ä¢ Falhas: {offline_stats.get('failed_count', 0)}\n\n"
                    f"üîÑ <b>Status Updates:</b>\n"
                    f"‚Ä¢ Total atualizados: {status_stats.get('updated_count', 0)}\n"
                    f"‚Ä¢ Falhas: {status_stats.get('failed_count', 0)}\n\n"
                    f"‚è∞ <b>Conclu√≠do:</b> {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}"
                )
            else:
                stats = result.get("results", {})
                message = (
                    f"‚úÖ <b>SINCRONIZA√á√ÉO ({sync_type.upper()}) CONCLU√çDA</b>\n\n"
                    f"üìä <b>Resultados:</b>\n"
                    f"‚Ä¢ Total processados: {stats.get('total_tickets', 0)}\n"
                    f"‚Ä¢ Sucessos: {stats.get('success_count', stats.get('updated_count', 0))}\n"
                    f"‚Ä¢ Falhas: {stats.get('failed_count', 0)}\n\n"
                    f"‚è∞ <b>Conclu√≠do:</b> {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}"
                )

            # Adiciona erros se houver
            errors = []
            if sync_type == "all":
                errors.extend(result.get("offline_sync", {}).get("results", {}).get("errors", []))
            else:
                errors.extend(stats.get("errors", []))

            if errors:
                message += f"\n\n‚ö†Ô∏è <b>Erros encontrados:</b>\n"
                for error in errors[:3]:  # M√°ximo 3 erros
                    message += f"‚Ä¢ {error}\n"
                if len(errors) > 3:
                    message += f"‚Ä¢ ... e mais {len(errors)-3} erros"
        else:
            message = (
                f"‚ùå <b>ERRO NA SINCRONIZA√á√ÉO</b>\n\n"
                f"üí¨ {result.get('message', 'Erro desconhecido')}\n\n"
                f"üîß Verifique os logs do sistema para mais detalhes."
            )

        await update.message.reply_html(message)

    except Exception as e:
        logger.error(f"Erro no comando /sync_tickets: {e}")
        await update.message.reply_html(
            f"‚ùå <b>Erro interno</b>\n\n"
            f"Ocorreu um erro durante a sincroniza√ß√£o: {str(e)}\n\n"
            f"üîß Verifique os logs do sistema."
        )

@require_command_permission("sync_admins")
async def sync_admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /sync_admins - Sincroniza administradores do grupo automaticamente (admin only).
    Funciona apenas em chat privado e para usu√°rios autorizados.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID
    from src.sentinela.services.admin_detection_service import admin_detection_service

    user = update.effective_user
    chat_id = update.effective_chat.id

    # S√≥ funciona em chat privado
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /sync_admins ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /sync_admins recebido de {user.username} (ID: {user.id})")

    try:
        await update.message.reply_html("üîç <b>Detectando administradores do grupo...</b>")

        # Executa sincroniza√ß√£o
        result = await admin_detection_service.sync_administrators_to_database()

        if result.get("status") == "success":
            stats = result.get("statistics", {})

            message = (
                f"‚úÖ <b>SINCRONIZA√á√ÉO DE ADMINISTRADORES CONCLU√çDA</b>\n\n"
                f"üìä <b>Resultados:</b>\n"
                f"‚Ä¢ Administradores atuais: {stats.get('total_current', 0)}\n"
                f"‚Ä¢ Novos detectados: {stats.get('new_admins', 0)}\n"
                f"‚Ä¢ Removidos: {stats.get('removed_admins', 0)}\n"
                f"‚Ä¢ Inalterados: {stats.get('unchanged_admins', 0)}\n\n"
                f"‚è∞ <b>Sincronizado em:</b> {result.get('sync_time', 'N/A')}\n\n"
            )

            # Lista novos administradores se houver
            new_admins = result.get("new_admins", [])
            if new_admins:
                message += f"üÜï <b>Novos administradores detectados:</b>\n"
                for admin in new_admins:
                    name = admin.get('username', admin.get('first_name', 'N/A'))
                    message += f"‚Ä¢ {name} (ID: {admin['user_id']})\n"
                message += "\n"

            # Lista administradores removidos se houver
            removed_ids = result.get("removed_admin_ids", [])
            if removed_ids:
                message += f"‚ùå <b>Administradores removidos:</b>\n"
                for admin_id in removed_ids:
                    message += f"‚Ä¢ ID: {admin_id}\n"
                message += "\n"

            message += (
                "üí° <b>Sistema atualizado!</b> Controle de acesso agora usa os administradores atuais do grupo.\n\n"
                "üîÑ A sincroniza√ß√£o tamb√©m ocorre automaticamente a cada 6 horas."
            )

        else:
            message = (
                f"‚ùå <b>ERRO NA SINCRONIZA√á√ÉO</b>\n\n"
                f"üí¨ {result.get('message', 'Erro desconhecido')}\n\n"
                f"üîß Verifique se o bot tem permiss√£o para ver administradores do grupo."
            )

        await update.message.reply_html(message)

    except Exception as e:
        logger.error(f"Erro no comando /sync_admins: {e}")
        await update.message.reply_html(
            f"‚ùå <b>Erro interno</b>\n\n"
            f"Ocorreu um erro durante a sincroniza√ß√£o: {str(e)}\n\n"
            f"üîß Verifique os logs do sistema."
        )

@require_command_permission("list_admins")
async def list_admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /list_admins - Lista administradores detectados (admin only).
    Funciona apenas em chat privado e para usu√°rios autorizados.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID
    from src.sentinela.clients.db_client import get_stored_administrators
    from src.sentinela.services.admin_detection_service import admin_detection_service

    user = update.effective_user
    chat_id = update.effective_chat.id

    # S√≥ funciona em chat privado
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /list_admins ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /list_admins recebido de {user.username} (ID: {user.id})")

    try:
        # Obt√©m informa√ß√µes de sincroniza√ß√£o
        sync_info = admin_detection_service.get_last_sync_info()

        # Obt√©m administradores armazenados
        admins = get_stored_administrators()

        message = f"üëë <b>ADMINISTRADORES DO SISTEMA</b>\n\n"

        if admins:
            message += f"üìä <b>Total:</b> {len(admins)} administrador(es)\n\n"

            for i, admin in enumerate(admins, 1):
                name_parts = []
                if admin.get('first_name'):
                    name_parts.append(admin['first_name'])
                if admin.get('last_name'):
                    name_parts.append(admin['last_name'])

                display_name = ' '.join(name_parts) if name_parts else 'N/A'
                username = f"@{admin['username']}" if admin.get('username') else 'Sem username'

                status_icon = "üëë" if admin.get('status') == 'owner' else "üë§"

                message += (
                    f"{status_icon} <b>{display_name}</b>\n"
                    f"‚Ä¢ Username: {username}\n"
                    f"‚Ä¢ ID: {admin['user_id']}\n"
                    f"‚Ä¢ Status: {admin.get('status', 'N/A').title()}\n"
                    f"‚Ä¢ Detectado: {admin.get('detected_at', 'N/A')}\n\n"
                )
        else:
            message += "‚ùå <b>Nenhum administrador detectado</b>\n\n"
            message += "üí° Use /sync_admins para detectar administradores do grupo.\n\n"

        # Informa√ß√µes de sincroniza√ß√£o
        if sync_info.get('last_sync'):
            last_sync = sync_info['last_sync']
            message += f"üîÑ <b>√öltima sincroniza√ß√£o:</b> {last_sync}\n"
        else:
            message += f"üîÑ <b>√öltima sincroniza√ß√£o:</b> Nunca\n"

        message += f"‚è∞ <b>Sincroniza√ß√£o autom√°tica:</b> A cada {sync_info.get('sync_interval_hours', 6)} horas\n\n"

        message += (
            "üí° <b>Como funciona:</b>\n"
            "‚Ä¢ Sistema detecta automaticamente administradores do grupo\n"
            "‚Ä¢ Controle de acesso baseado nos administradores reais\n"
            "‚Ä¢ Sincroniza√ß√£o autom√°tica mant√©m tudo atualizado\n"
            "‚Ä¢ Use /sync_admins para atualizar manualmente"
        )

        await update.message.reply_html(message)

    except Exception as e:
        logger.error(f"Erro no comando /list_admins: {e}")
        await update.message.reply_html(
            f"‚ùå <b>Erro interno</b>\n\n"
            f"Ocorreu um erro ao listar administradores: {str(e)}\n\n"
            f"üîß Verifique os logs do sistema."
        )

@require_command_permission("health_hubsoft")
async def health_hubsoft_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /health_hubsoft - Verifica status da integra√ß√£o HubSoft (admin only).
    Funciona apenas em chat privado e para usu√°rios autorizados.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID, HUBSOFT_ENABLED
    from src.sentinela.services.hubsoft_sync_service import hubsoft_sync_service

    user = update.effective_user
    chat_id = update.effective_chat.id

    # S√≥ funciona em chat privado
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /health_hubsoft ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /health_hubsoft recebido de {user.username} (ID: {user.id})")

    try:
        await update.message.reply_html("üîç <b>Verificando status do HubSoft...</b>")

        # Verifica se HubSoft est√° habilitado
        if not HUBSOFT_ENABLED:
            await update.message.reply_html(
                "‚ö†Ô∏è <b>HUBSOFT DESABILITADO</b>\n\n"
                "üí° HubSoft n√£o est√° configurado no sistema.\n"
                "üîß Configure HUBSOFT_ENABLED=true no .env para ativar."
            )
            return

        # Executa health check
        is_online = await hubsoft_sync_service.check_hubsoft_health()

        # Obt√©m estat√≠sticas de sincroniza√ß√£o
        sync_status = await hubsoft_sync_service.get_sync_status_summary()

        # Monta relat√≥rio de sa√∫de
        status_icon = "üü¢" if is_online else "üî¥"
        status_text = "ONLINE" if is_online else "OFFLINE"

        message = f"{status_icon} <b>STATUS HUBSOFT: {status_text}</b>\n\n"

        # Informa√ß√µes de conectividade
        message += "üì° <b>CONECTIVIDADE:</b>\n"
        if sync_status.get("last_health_check"):
            last_check = datetime.fromisoformat(sync_status["last_health_check"]).strftime("%d/%m/%Y √†s %H:%M:%S")
            message += f"‚Ä¢ √öltima verifica√ß√£o: {last_check}\n"
        else:
            message += "‚Ä¢ √öltima verifica√ß√£o: Nunca\n"

        message += f"‚Ä¢ Status atual: {'Conectado' if is_online else 'Desconectado'}\n"
        message += f"‚Ä¢ Sincroniza√ß√£o em andamento: {'Sim' if sync_status.get('sync_in_progress') else 'N√£o'}\n\n"

        # Estat√≠sticas de sincroniza√ß√£o
        stats = sync_status.get("statistics", {})
        if stats:
            message += "üìä <b>ESTAT√çSTICAS:</b>\n"
            message += f"‚Ä¢ Total de tickets: {stats.get('total_tickets', 0)}\n"
            message += f"‚Ä¢ Tickets sincronizados: {stats.get('synced_tickets', 0)}\n"
            message += f"‚Ä¢ Tickets offline: {stats.get('offline_tickets', 0)}\n"
            message += f"‚Ä¢ Falhas de sincroniza√ß√£o: {stats.get('failed_sync_tickets', 0)}\n"
            message += f"‚Ä¢ Percentual sincronizado: {stats.get('sync_percentage', 0)}%\n"

            if stats.get('last_successful_sync'):
                last_sync = datetime.fromisoformat(stats['last_successful_sync']).strftime("%d/%m/%Y √†s %H:%M")
                message += f"‚Ä¢ √öltima sincroniza√ß√£o: {last_sync}\n"
            else:
                message += f"‚Ä¢ √öltima sincroniza√ß√£o: Nunca\n"

        message += "\n"

        # A√ß√µes recomendadas
        if is_online:
            message += "‚úÖ <b>SISTEMA FUNCIONANDO NORMALMENTE</b>\n\n"
            if stats.get('offline_tickets', 0) > 0:
                message += f"üí° <b>A√ß√£o recomendada:</b> Executar /sync_tickets offline para sincronizar {stats['offline_tickets']} ticket(s) pendente(s)"
            else:
                message += "üéØ <b>Todas as sincroniza√ß√µes est√£o em dia!</b>"
        else:
            message += "‚ùå <b>SISTEMA INDISPON√çVEL</b>\n\n"
            message += "üîß <b>A√ß√µes recomendadas:</b>\n"
            message += "‚Ä¢ Verificar conectividade de rede\n"
            message += "‚Ä¢ Verificar credenciais da API\n"
            message += "‚Ä¢ Aguardar sistema voltar online\n"
            message += "‚Ä¢ Tickets criados offline ser√£o sincronizados automaticamente"

        await update.message.reply_html(message)

    except Exception as e:
        logger.error(f"Erro no comando /health_hubsoft: {e}")
        await update.message.reply_html(
            f"‚ùå <b>Erro interno</b>\n\n"
            f"Ocorreu um erro ao verificar o status: {str(e)}\n\n"
            f"üîß Verifique os logs do sistema."
        )

@require_command_permission("admin_tickets")
async def admin_tickets_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Comando /admin_tickets - Consulta avan√ßada de tickets para administradores.
    Funciona apenas em chat privado e para usu√°rios autorizados.
    """
    from src.sentinela.core.config import TELEGRAM_GROUP_ID
    from src.sentinela.integrations.hubsoft.atendimento import hubsoft_atendimento_client
    from datetime import datetime, timedelta

    user = update.effective_user
    chat_id = update.effective_chat.id

    # S√≥ funciona em chat privado
    if str(chat_id) == str(TELEGRAM_GROUP_ID):
        logger.info(f"Comando /admin_tickets ignorado no grupo {chat_id}")
        return

    logger.info(f"Comando /admin_tickets recebido de {user.username} (ID: {user.id})")

    try:
        # Parsear argumentos do comando
        args = context.args
        pagina = 0
        itens_por_pagina = 10
        data_inicio = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
        data_fim = datetime.now().strftime('%Y-%m-%d')

        # Processar argumentos opcionais
        if args:
            for arg in args:
                if arg.startswith('pagina='):
                    pagina = max(0, int(arg.split('=')[1]) - 1)  # Usu√°rio usa 1-based, API usa 0-based
                elif arg.startswith('limite='):
                    itens_por_pagina = min(50, max(1, int(arg.split('=')[1])))
                elif arg.startswith('dias='):
                    dias = int(arg.split('=')[1])
                    data_inicio = (datetime.now() - timedelta(days=dias)).strftime('%Y-%m-%d')

        # Consulta usando endpoint otimizado
        resultado = await hubsoft_atendimento_client.get_atendimentos_paginado(
            pagina=pagina,
            itens_por_pagina=itens_por_pagina,
            data_inicio=data_inicio,
            data_fim=data_fim,
            relacoes="atendimento_mensagem,cliente_servico"
        )

        if resultado['status'] != 'success':
            await update.message.reply_html(
                f"‚ùå <b>Erro na consulta:</b> {resultado.get('msg', 'Erro desconhecido')}"
            )
            return

        atendimentos = resultado['atendimentos']
        paginacao = resultado['paginacao']

        if not atendimentos:
            await update.message.reply_html(
                f"üìä <b>CONSULTA ADMINISTRATIVA</b>\n\n"
                f"üìÖ Per√≠odo: {data_inicio} a {data_fim}\n"
                f"üìÑ P√°gina: {pagina + 1}\n\n"
                f"‚úÖ Nenhum atendimento encontrado no per√≠odo."
            )
            return

        # Monta relat√≥rio
        message = f"üìä <b>RELAT√ìRIO ADMINISTRATIVO DE TICKETS</b>\n\n"
        message += f"üìÖ <b>Per√≠odo:</b> {data_inicio} a {data_fim}\n"
        message += f"üìÑ <b>P√°gina:</b> {pagina + 1} de {paginacao.get('ultima_pagina', 0) + 1}\n"
        message += f"üìà <b>Total:</b> {paginacao.get('total_registros', 0)} tickets\n"
        message += f"üìã <b>Exibindo:</b> {len(atendimentos)} tickets\n\n"
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"

        for i, atendimento in enumerate(atendimentos, 1):
            protocolo = atendimento.get('protocolo', 'N/A')
            status_info = atendimento.get('status', {})
            status_name = status_info.get('display', 'Status Desconhecido') if isinstance(status_info, dict) else str(status_info)

            # Cliente info
            cliente_info = "Cliente Desconhecido"
            if 'cliente_servico' in atendimento and 'cliente' in atendimento['cliente_servico']:
                cliente_info = atendimento['cliente_servico']['cliente'].get('display', 'Cliente')

            # Tempo em aberto formatado
            tempo_formatado = atendimento.get('tempo_aberto_formatado', 'N/A')

            # Tipo de atendimento
            tipo_info = atendimento.get('tipo_atendimento', {})
            tipo_nome = tipo_info.get('descricao', 'Tipo Desconhecido') if isinstance(tipo_info, dict) else str(tipo_info)

            message += f"<b>{i}. #{protocolo}</b>\n"
            message += f"üë§ {cliente_info}\n"
            message += f"üè∑Ô∏è {tipo_nome}\n"
            message += f"üìä {status_name} | ‚è±Ô∏è {tempo_formatado}\n\n"

        # Instru√ß√µes de uso
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        message += "<b>üí° COMANDOS DISPON√çVEIS:</b>\n"
        message += "‚Ä¢ <code>/admin_tickets</code> - Esta p√°gina\n"
        message += "‚Ä¢ <code>/admin_tickets pagina=2</code> - P√°gina espec√≠fica\n"
        message += "‚Ä¢ <code>/admin_tickets limite=20</code> - Mais resultados\n"
        message += "‚Ä¢ <code>/admin_tickets dias=30</code> - √öltimos 30 dias\n"
        message += "‚Ä¢ <code>/admin_tickets pagina=2 limite=5 dias=14</code> - Combinado"

        await update.message.reply_html(message)

    except ValueError as ve:
        await update.message.reply_html(
            f"‚ùå <b>Erro nos par√¢metros:</b> {str(ve)}\n\n"
            f"üí° Uso correto: <code>/admin_tickets pagina=1 limite=10 dias=7</code>"
        )
    except Exception as e:
        logger.error(f"Erro no comando /admin_tickets: {e}")
        await update.message.reply_html(
            "‚ùå <b>Erro interno</b>\n\n"
            "Ocorreu um erro ao processar a consulta. Verifique os logs do sistema."
        )

async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handler para fotos enviadas em chat privado (anexos de suporte).
    """
    from src.sentinela.services.support_service import handle_photo_attachment

    user = update.effective_user
    photo = update.message.photo[-1]  # Pega a maior resolu√ß√£o

    logger.info(f"Foto recebida de {user.username} (ID: {user.id})")

    # Processa anexo de foto no contexto de suporte
    await handle_photo_attachment(user.id, photo, user.username)

def register_handlers(application: Application) -> None:
    """
    Registra todos os handlers de comando e mensagem na aplica√ß√£o.
    """
    logger.info("Registrando handlers de comandos e mensagens...")

    # Handlers de comandos (chat privado)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test_group", test_group))
    application.add_handler(CommandHandler("topics", topics_command))
    application.add_handler(CommandHandler("auto_config", auto_config_command))
    application.add_handler(CommandHandler("test_topics", test_topics_command))
    application.add_handler(CommandHandler("scan_topics", scan_topics_command))
    application.add_handler(CommandHandler("suporte", suporte_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(CommandHandler("admin_tickets", admin_tickets_command))

    # Comandos administrativos de sincroniza√ß√£o
    application.add_handler(CommandHandler("sync_tickets", sync_tickets_command))
    application.add_handler(CommandHandler("health_hubsoft", health_hubsoft_command))
    # Comandos administrativos de gerenciamento de admins
    application.add_handler(CommandHandler("sync_admins", sync_admins_command))
    application.add_handler(CommandHandler("list_admins", list_admins_command))

    # Handler para callback queries (bot√µes inline)
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    # Handler para mensagens no grupo (novos membros, t√≥picos espec√≠ficos)
    from src.sentinela.core.config import TELEGRAM_GROUP_ID
    group_filter = filters.Chat(chat_id=int(TELEGRAM_GROUP_ID))
    application.add_handler(MessageHandler(group_filter, handle_group_message))

    # Handler para fotos (anexos de suporte) - apenas fora do grupo
    photo_filter = filters.PHOTO & ~group_filter
    application.add_handler(MessageHandler(photo_filter, handle_photo_message))

    # Handler para comandos desconhecidos/n√£o autorizados - apenas fora do grupo
    unknown_command_filter = filters.COMMAND & ~group_filter
    application.add_handler(MessageHandler(unknown_command_filter, handle_unknown_command))

    # Handler para mensagens privadas (CPF, etc) - apenas fora do grupo
    private_filter = filters.TEXT & ~filters.COMMAND & ~group_filter
    application.add_handler(MessageHandler(private_filter, handle_message))

    logger.info("Handlers registrados com sucesso.")
