#!/usr/bin/env python3
"""
Script para verifica√ß√£o di√°ria dos usu√°rios.

Verifica se todos os usu√°rios ativos no banco ainda possuem servi√ßos ativos
na API HubSoft e remove do grupo aqueles que n√£o possuem mais.

Para usar no futuro:
- Configure este script para rodar diariamente via cron
- Exemplo cron: 0 6 * * * /usr/bin/python3 /path/to/scripts/daily_checkup.py
"""

import sys
import os
import asyncio
import logging
from datetime import datetime

# Adiciona o diret√≥rio raiz e src ao path para importar m√≥dulos
root_dir = os.path.join(os.path.dirname(__file__), '..')
sys.path.append(root_dir)
sys.path.append(os.path.join(root_dir, 'src'))

from src.sentinela.clients.db_client import get_all_active_users, mark_user_inactive
from src.sentinela.integrations.hubsoft.cliente import check_contract_status
from src.sentinela.services.group_service import is_user_in_group, remove_user_from_group, notify_administrators
from src.sentinela.core.logging_config import setup_logging

logger = logging.getLogger(__name__)

async def verify_user_access(user_data: dict) -> bool:
    """
    Verifica se um usu√°rio ainda deve ter acesso ao grupo.

    Args:
        user_data: Dados do usu√°rio do banco

    Returns:
        bool: True se deve manter acesso, False para remover
    """
    user_id = user_data['user_id']
    cpf = user_data['cpf']
    client_name = user_data['client_name']

    logger.info(f"Verificando acesso para {client_name} (ID: {user_id})")

    try:
        # 1. Verifica se ainda est√° no grupo
        is_in_group = await is_user_in_group(user_id)
        if not is_in_group:
            logger.info(f"Usu√°rio {user_id} n√£o est√° mais no grupo")
            return False

        # 2. Verifica se contrato ainda est√° ativo
        has_active_contract = check_contract_status(cpf)
        if not has_active_contract:
            logger.warning(f"Contrato inativo para {client_name} (ID: {user_id})")

            # Remove do grupo imediatamente
            removal_success = await remove_user_from_group(user_id, "Contrato inativo")
            if removal_success:
                logger.info(f"Usu√°rio {user_id} removido do grupo com sucesso")
            else:
                logger.error(f"Falha ao remover usu√°rio {user_id} do grupo")

            return False

        logger.info(f"Acesso confirmado para {client_name} (ID: {user_id})")
        return True

    except Exception as e:
        logger.error(f"Erro ao verificar usu√°rio {user_id}: {e}")
        return True  # Em caso de erro, mant√©m o acesso

async def run_daily_checkup():
    """
    Executa a verifica√ß√£o di√°ria de todos os usu√°rios ativos.
    """
    logger.info("=== INICIANDO CHECKUP DI√ÅRIO ===")

    try:
        # Busca todos os usu√°rios ativos
        active_users = get_all_active_users()
        logger.info(f"Encontrados {len(active_users)} usu√°rios ativos no banco")

        removed_count = 0
        verified_count = 0
        removed_users = []  # Lista para armazenar usu√°rios removidos

        for user_data in active_users:
            user_id = user_data['user_id']
            client_name = user_data['client_name']

            try:
                logger.info(f"üìã Processando usu√°rio {client_name} (ID: {user_id})...")

                # Verifica se ainda deve ter acesso
                should_keep_access = await verify_user_access(user_data)

                if should_keep_access:
                    verified_count += 1
                    logger.info(f"‚úÖ Usu√°rio {client_name} (ID: {user_id}) - Acesso mantido")
                else:
                    # Marca como inativo no banco
                    if mark_user_inactive(user_id):
                        removed_count += 1
                        removed_users.append(user_data)  # Adiciona √† lista de removidos
                        logger.warning(f"üö´ Usu√°rio {client_name} (ID: {user_id}) - Marcado como inativo e removido do grupo")
                    else:
                        logger.error(f"‚ùå Falha ao marcar usu√°rio {client_name} (ID: {user_id}) como inativo no banco")

            except Exception as e:
                logger.error(f"‚ùå Erro cr√≠tico ao processar usu√°rio {client_name} (ID: {user_id}): {e}")
                # Continua com o pr√≥ximo usu√°rio mesmo em caso de erro

        logger.info(f"=== CHECKUP CONCLU√çDO ===")
        logger.info(f"üìä ESTAT√çSTICAS FINAIS:")
        logger.info(f"   ‚Ä¢ Total de usu√°rios ativos no banco: {len(active_users)}")
        logger.info(f"   ‚Ä¢ Usu√°rios com acesso mantido: {verified_count}")
        logger.info(f"   ‚Ä¢ Usu√°rios removidos por contrato inativo: {removed_count}")
        logger.info(f"   ‚Ä¢ Taxa de manuten√ß√£o: {verified_count/len(active_users)*100:.1f}%" if active_users else "   ‚Ä¢ Taxa de manuten√ß√£o: N/A")

        if removed_count > 0:
            logger.warning(f"‚ö†Ô∏è  {removed_count} usu√°rio(s) foram removidos automaticamente do grupo!")

            # Notifica administradores sobre os usu√°rios removidos
            logger.info("üì¨ Enviando notifica√ß√µes para administradores...")
            notification_success = await notify_administrators(removed_users)

            if notification_success:
                logger.info("‚úÖ Administradores notificados com sucesso!")
            else:
                logger.error("‚ùå Falha ao notificar administradores")
        else:
            logger.info(f"‚úÖ Todos os usu√°rios mantiveram acesso - nenhuma remo√ß√£o necess√°ria")

    except Exception as e:
        logger.error(f"‚ùå ERRO CR√çTICO durante checkup di√°rio: {e}")
        logger.error(f"   ‚Ä¢ Verifique conectividade com API HubSoft e Telegram")
        logger.error(f"   ‚Ä¢ Verifique permiss√µes do bot no grupo")
        logger.error(f"   ‚Ä¢ Verifique integridade do banco de dados")

def main():
    """Fun√ß√£o principal do script."""
    setup_logging()
    logger.info(f"Checkup di√°rio iniciado em {datetime.now()}")

    # Executa o checkup ass√≠ncrono
    asyncio.run(run_daily_checkup())

    logger.info("Checkup di√°rio finalizado")

if __name__ == "__main__":
    main()