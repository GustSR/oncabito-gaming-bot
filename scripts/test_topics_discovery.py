#!/usr/bin/env python3
"""
Script de teste para validar o sistema de descoberta de t√≥picos.

Testa as funcionalidades de identifica√ß√£o autom√°tica de t√≥picos e
suas configura√ß√µes.
"""

import sys
import os
import asyncio
import logging
from datetime import datetime

# Adiciona o diret√≥rio raiz e src ao path para importar m√≥dulos
root_dir = os.path.join(os.path.dirname(__file__), '..')
sys.path.append(root_dir)
sys.path.append(os.path.join(root_dir, 'src'))

from src.sentinela.services.topics_service import topics_service
from src.sentinela.core.logging_config import setup_logging
from src.sentinela.core.config import TELEGRAM_GROUP_ID, RULES_TOPIC_ID, WELCOME_TOPIC_ID

logger = logging.getLogger(__name__)

async def test_topics_discovery():
    """Testa a descoberta e listagem de t√≥picos."""
    logger.info("=== TESTE DE DESCOBERTA DE T√ìPICOS ===")

    try:
        # Teste 1: Listar t√≥picos descobertos
        logger.info("üìã Listando t√≥picos descobertos...")
        topics = await topics_service.get_all_topics()

        if topics:
            logger.info(f"‚úÖ Encontrados {len(topics)} t√≥picos:")
            for topic in topics:
                logger.info(f"   ‚Ä¢ {topic['name']} (ID: {topic['id']})")
        else:
            logger.warning("‚ùå Nenhum t√≥pico descoberto ainda")
            logger.info("üí° Envie mensagens em t√≥picos do grupo para descobri-los")

        # Teste 2: Formata√ß√£o de lista
        logger.info("\nüìÑ Testando formata√ß√£o de lista...")
        formatted_list = await topics_service.format_topics_list()
        print("\n" + "="*60)
        print("LISTA FORMATADA DE T√ìPICOS:")
        print("="*60)
        print(formatted_list.replace('<b>', '').replace('</b>', '').replace('<code>', '').replace('</code>', ''))
        print("="*60)

        # Teste 3: Sugest√µes autom√°ticas
        logger.info("\nüîß Testando sugest√µes autom√°ticas...")
        suggestions = await topics_service.get_topic_suggestions()

        logger.info("Sugest√µes encontradas:")
        if suggestions['rules_topic']:
            logger.info(f"   üìã Regras: {suggestions['rules_topic']['name']} (ID: {suggestions['rules_topic']['id']})")
        else:
            logger.info("   üìã Regras: N√£o encontrado")

        if suggestions['welcome_topic']:
            logger.info(f"   üëã Boas-vindas: {suggestions['welcome_topic']['name']} (ID: {suggestions['welcome_topic']['id']})")
        else:
            logger.info("   üëã Boas-vindas: N√£o encontrado")

        logger.info(f"   üìÇ Outros t√≥picos: {len(suggestions['other_topics'])}")

        # Teste 4: Configura√ß√£o autom√°tica
        logger.info("\n‚öôÔ∏è  Testando configura√ß√£o autom√°tica...")
        auto_config = await topics_service.auto_configure_topics()
        print("\n" + "="*60)
        print("CONFIGURA√á√ÉO AUTOM√ÅTICA SUGERIDA:")
        print("="*60)
        print(auto_config.replace('<b>', '').replace('</b>', '').replace('<code>', '').replace('</code>', ''))
        print("="*60)

        return True

    except Exception as e:
        logger.error(f"‚ùå Erro durante teste de descoberta: {e}")
        return False

async def test_current_configuration():
    """Testa a configura√ß√£o atual de t√≥picos."""
    logger.info("\n=== TESTE DE CONFIGURA√á√ÉO ATUAL ===")

    try:
        logger.info("üìã Configura√ß√µes atuais:")
        logger.info(f"   ‚Ä¢ Grupo ID: {TELEGRAM_GROUP_ID}")
        logger.info(f"   ‚Ä¢ T√≥pico Regras: {RULES_TOPIC_ID or 'N√£o configurado'}")
        logger.info(f"   ‚Ä¢ T√≥pico Boas-vindas: {WELCOME_TOPIC_ID or 'N√£o configurado'}")

        # Verifica se os t√≥picos configurados existem
        topics = await topics_service.get_all_topics()

        rules_found = False
        welcome_found = False

        if RULES_TOPIC_ID:
            for topic in topics:
                if str(topic['id']) == str(RULES_TOPIC_ID):
                    rules_found = True
                    logger.info(f"‚úÖ T√≥pico Regras encontrado: {topic['name']}")
                    break
            if not rules_found:
                logger.warning(f"‚ùå T√≥pico Regras (ID: {RULES_TOPIC_ID}) n√£o encontrado nos t√≥picos descobertos")

        if WELCOME_TOPIC_ID:
            for topic in topics:
                if str(topic['id']) == str(WELCOME_TOPIC_ID):
                    welcome_found = True
                    logger.info(f"‚úÖ T√≥pico Boas-vindas encontrado: {topic['name']}")
                    break
            if not welcome_found:
                logger.warning(f"‚ùå T√≥pico Boas-vindas (ID: {WELCOME_TOPIC_ID}) n√£o encontrado nos t√≥picos descobertos")

        # Status geral
        if not RULES_TOPIC_ID and not WELCOME_TOPIC_ID:
            logger.warning("‚ö†Ô∏è Nenhum t√≥pico configurado - bot n√£o responder√° no grupo")
        elif rules_found or welcome_found:
            logger.info("‚úÖ Configura√ß√£o funcionando - bot responder√° nos t√≥picos configurados")
        else:
            logger.error("‚ùå IDs configurados mas t√≥picos n√£o encontrados - verificar configura√ß√£o")

        return True

    except Exception as e:
        logger.error(f"‚ùå Erro durante teste de configura√ß√£o: {e}")
        return False

async def display_help():
    """Exibe ajuda sobre como usar o sistema de t√≥picos."""
    print("\n" + "="*60)
    print("üéØ SISTEMA DE DESCOBERTA DE T√ìPICOS - GUIA DE USO")
    print("="*60)
    print()
    print("üìã COMANDOS DISPON√çVEIS (enviar para o bot em privado):")
    print("   /topics        - Lista todos os t√≥picos descobertos")
    print("   /auto_config   - Sugere configura√ß√µes autom√°ticas")
    print("   /test_topics   - Testa configura√ß√£o atual")
    print()
    print("üîÑ COMO DESCOBRIR T√ìPICOS:")
    print("   1. Envie mensagens nos t√≥picos do grupo")
    print("   2. Bot identificar√° automaticamente os IDs")
    print("   3. Use /topics para ver a lista completa")
    print()
    print("‚öôÔ∏è COMO CONFIGURAR:")
    print("   1. Use /auto_config para obter sugest√µes")
    print("   2. Adicione os IDs no arquivo .env:")
    print("      RULES_TOPIC_ID=\"123\"")
    print("      WELCOME_TOPIC_ID=\"456\"")
    print("   3. Reinicie o bot")
    print("   4. Use /test_topics para validar")
    print()
    print("üéÆ FUNCIONAMENTO:")
    print("   ‚Ä¢ Bot responde APENAS nos t√≥picos configurados")
    print("   ‚Ä¢ Ignora mensagens do chat geral do grupo")
    print("   ‚Ä¢ Detecta novos membros em qualquer t√≥pico")
    print("   ‚Ä¢ Envia boas-vindas no t√≥pico configurado")
    print()
    print("="*60)

async def run_all_tests():
    """Executa todos os testes do sistema de t√≥picos."""
    logger.info(f"üß™ INICIANDO TESTES DO SISTEMA DE T√ìPICOS - {datetime.now()}")

    success_count = 0
    total_tests = 2

    # Teste 1: Descoberta de t√≥picos
    if await test_topics_discovery():
        success_count += 1

    # Teste 2: Configura√ß√£o atual
    if await test_current_configuration():
        success_count += 1

    # Exibe ajuda
    await display_help()

    # Resultado final
    logger.info(f"\nüèÅ TESTES CONCLU√çDOS: {success_count}/{total_tests} sucessos")

    if success_count == total_tests:
        logger.info("‚úÖ Todos os testes passaram!")
    else:
        logger.warning(f"‚ö†Ô∏è {total_tests - success_count} teste(s) falharam")

def main():
    """Fun√ß√£o principal do script de teste."""
    setup_logging()

    # Executa os testes
    asyncio.run(run_all_tests())

if __name__ == "__main__":
    main()