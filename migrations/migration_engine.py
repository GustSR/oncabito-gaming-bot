#!/usr/bin/env python3
"""
Migration Engine para OnCabito Bot
Gerencia vers√µes do schema do banco de dados SQLite
"""

import os
import sqlite3
import logging
from pathlib import Path
from datetime import datetime
from typing import List, Tuple

logger = logging.getLogger(__name__)

class MigrationEngine:
    def __init__(self, database_path: str, migrations_dir: str = "migrations"):
        self.database_path = database_path
        self.migrations_dir = Path(migrations_dir)
        self.migrations_dir.mkdir(exist_ok=True)

    def get_db_connection(self):
        """Cria conex√£o com o banco de dados"""
        conn = sqlite3.connect(self.database_path)
        conn.row_factory = sqlite3.Row
        return conn

    def initialize_migrations_table(self):
        """Cria tabela de controle de migrations se n√£o existir"""
        with self.get_db_connection() as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS schema_migrations (
                    version INTEGER PRIMARY KEY,
                    filename TEXT NOT NULL,
                    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    checksum TEXT
                )
            """)
            conn.commit()
            logger.info("Tabela de migrations inicializada")

    def get_applied_migrations(self) -> List[int]:
        """Retorna lista de migrations j√° aplicadas"""
        with self.get_db_connection() as conn:
            cursor = conn.execute("""
                SELECT version FROM schema_migrations ORDER BY version
            """)
            return [row[0] for row in cursor.fetchall()]

    def get_available_migrations(self) -> List[Tuple[int, str]]:
        """Retorna lista de migrations dispon√≠veis (version, filename)"""
        migrations = []
        for file_path in sorted(self.migrations_dir.glob("*.sql")):
            filename = file_path.name
            # Extrai n√∫mero da migration do formato: 001_description.sql
            try:
                version = int(filename[:3])
                migrations.append((version, filename))
            except ValueError:
                logger.warning(f"Arquivo de migration com formato inv√°lido: {filename}")
        return migrations

    def get_pending_migrations(self) -> List[Tuple[int, str]]:
        """Retorna migrations que precisam ser executadas"""
        applied = set(self.get_applied_migrations())
        available = self.get_available_migrations()

        pending = [(v, f) for v, f in available if v not in applied]
        return sorted(pending)

    def count_critical_records(self) -> dict:
        """Conta registros cr√≠ticos antes/depois de migrations"""
        counts = {}
        try:
            with self.get_db_connection() as conn:
                # Conta usu√°rios com CPF (dado mais cr√≠tico)
                cursor = conn.execute("SELECT COUNT(*) FROM users WHERE user_id IS NOT NULL AND cpf IS NOT NULL")
                counts['users_with_cpf'] = cursor.fetchone()[0]

                # Conta total de usu√°rios
                cursor = conn.execute("SELECT COUNT(*) FROM users")
                counts['total_users'] = cursor.fetchone()[0]

                # Conta tickets de suporte
                try:
                    cursor = conn.execute("SELECT COUNT(*) FROM support_tickets")
                    counts['support_tickets'] = cursor.fetchone()[0]
                except:
                    counts['support_tickets'] = 0  # Tabela pode n√£o existir ainda

                # Conta estados de usu√°rios
                try:
                    cursor = conn.execute("SELECT COUNT(*) FROM user_states")
                    counts['user_states'] = cursor.fetchone()[0]
                except:
                    counts['user_states'] = 0  # Tabela pode n√£o existir ainda

        except Exception as e:
            logger.warning(f"Erro ao contar registros: {e}")
            counts = {'error': str(e)}

        return counts

    def validate_migration_integrity(self, before: dict, after: dict, version: int):
        """Valida integridade dos dados ap√≥s migration"""
        if 'error' in before or 'error' in after:
            logger.warning(f"N√£o foi poss√≠vel validar integridade da migration {version}")
            return

        critical_tables = ['users_with_cpf', 'total_users']

        for table in critical_tables:
            before_count = before.get(table, 0)
            after_count = after.get(table, 0)

            # Permite crescimento, mas n√£o perda > 5%
            if before_count > 0:
                loss_percentage = ((before_count - after_count) / before_count) * 100

                if loss_percentage > 5:  # Perda > 5% √© suspeita
                    logger.error(
                        f"‚ö†Ô∏è  ALERTA CR√çTICO: Migration {version} causou perda de {loss_percentage:.1f}% "
                        f"em {table} ({before_count} ‚Üí {after_count})"
                    )
                elif loss_percentage > 0:
                    logger.warning(
                        f"Migration {version}: {table} reduziu {loss_percentage:.1f}% "
                        f"({before_count} ‚Üí {after_count})"
                    )
                elif after_count > before_count:
                    growth = ((after_count - before_count) / before_count) * 100
                    logger.info(
                        f"‚úÖ Migration {version}: {table} cresceu {growth:.1f}% "
                        f"({before_count} ‚Üí {after_count})"
                    )
                else:
                    logger.info(f"‚úÖ Migration {version}: {table} manteve {after_count} registros")
            elif after_count > 0:
                logger.info(f"‚úÖ Migration {version}: {table} criado com {after_count} registros")

    def calculate_checksum(self, content: str) -> str:
        """Calcula checksum simples do conte√∫do da migration"""
        import hashlib
        return hashlib.md5(content.encode()).hexdigest()

    def execute_migration(self, version: int, filename: str) -> bool:
        """Executa uma migration espec√≠fica com verifica√ß√£o de integridade"""
        migration_path = self.migrations_dir / filename

        if not migration_path.exists():
            logger.error(f"Arquivo de migration n√£o encontrado: {migration_path}")
            return False

        try:
            # Conta registros ANTES da migration
            before_counts = self.count_critical_records()
            logger.info(f"üìä Registros antes da migration {version}: {before_counts}")

            # L√™ o conte√∫do da migration
            with open(migration_path, 'r', encoding='utf-8') as f:
                content = f.read()

            checksum = self.calculate_checksum(content)

            # Executa a migration
            with self.get_db_connection() as conn:
                # Executa comandos SQL da migration
                conn.executescript(content)

                # Registra a migration como aplicada
                conn.execute("""
                    INSERT INTO schema_migrations (version, filename, checksum)
                    VALUES (?, ?, ?)
                """, (version, filename, checksum))

                conn.commit()

            # Conta registros DEPOIS da migration
            after_counts = self.count_critical_records()
            logger.info(f"üìä Registros depois da migration {version}: {after_counts}")

            # Verifica integridade
            self.validate_migration_integrity(before_counts, after_counts, version)

            logger.info(f"‚úÖ Migration {version} ({filename}) aplicada com sucesso")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erro ao executar migration {version}: {e}")
            return False

    def run_pending_migrations(self) -> bool:
        """Executa todas as migrations pendentes com verifica√ß√£o de integridade"""
        self.initialize_migrations_table()

        pending = self.get_pending_migrations()

        if not pending:
            logger.info("‚úÖ Nenhuma migration pendente")
            return True

        # Conta registros totais antes de come√ßar
        initial_counts = self.count_critical_records()
        logger.info(f"üìä Estado inicial do banco: {initial_counts}")

        logger.info(f"üîÑ Executando {len(pending)} migration(s) pendente(s)")

        success_count = 0
        for version, filename in pending:
            logger.info(f"üîÑ Aplicando migration {version}: {filename}")
            if self.execute_migration(version, filename):
                success_count += 1
            else:
                logger.error(f"‚ùå Falha na migration {version}, parando execu√ß√£o")
                return False

        # Verifica estado final
        final_counts = self.count_critical_records()
        logger.info(f"üìä Estado final do banco: {final_counts}")

        # Valida integridade geral
        if 'error' not in initial_counts and 'error' not in final_counts:
            logger.info("üîç Validando integridade geral...")
            self.validate_migration_integrity(initial_counts, final_counts, -1)  # -1 = todas as migrations

        logger.info(f"‚úÖ Todas as {success_count} migration(s) foram aplicadas com sucesso")
        return True

    def get_migration_status(self) -> dict:
        """Retorna status das migrations"""
        self.initialize_migrations_table()

        applied = self.get_applied_migrations()
        available = self.get_available_migrations()
        pending = self.get_pending_migrations()

        return {
            "applied_count": len(applied),
            "available_count": len(available),
            "pending_count": len(pending),
            "applied_versions": applied,
            "pending_migrations": pending,
            "last_applied": max(applied) if applied else None
        }

def main():
    """Fun√ß√£o principal para execu√ß√£o standalone"""
    import sys

    # Configura√ß√£o de logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - [%(levelname)s] - %(message)s'
    )

    # Caminho do banco (pode ser passado como argumento)
    db_path = sys.argv[1] if len(sys.argv) > 1 else "data/database/sentinela.db"

    if not os.path.exists(db_path):
        logger.error(f"Banco de dados n√£o encontrado: {db_path}")
        sys.exit(1)

    # Cria engine e executa migrations
    engine = MigrationEngine(db_path)

    # Mostra status atual
    status = engine.get_migration_status()
    print(f"üìä Status das Migrations:")
    print(f"   ‚Ä¢ Aplicadas: {status['applied_count']}")
    print(f"   ‚Ä¢ Dispon√≠veis: {status['available_count']}")
    print(f"   ‚Ä¢ Pendentes: {status['pending_count']}")

    if status['pending_count'] > 0:
        print(f"\nüîÑ Executando migrations pendentes...")
        success = engine.run_pending_migrations()
        if success:
            print(f"‚úÖ Todas as migrations foram aplicadas!")
        else:
            print(f"‚ùå Erro ao aplicar migrations")
            sys.exit(1)
    else:
        print(f"‚úÖ Banco de dados est√° atualizado")

if __name__ == "__main__":
    main()