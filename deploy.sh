#!/bin/bash
# =====================================
# OnCabito Bot - Deploy Script
# =====================================

set -e

echo "üöÄ OnCabito Bot - Deploy Manual"
echo "==============================="

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se est√° no diret√≥rio correto
if [ ! -f "docker-compose.yml" ]; then
    print_error "docker-compose.yml n√£o encontrado. Execute no diret√≥rio do projeto."
    exit 1
fi

# 1. Atualizar c√≥digo do reposit√≥rio
echo "üì• Atualizando c√≥digo do reposit√≥rio..."
if git pull origin main; then
    print_status "C√≥digo atualizado"
else
    print_warning "Falha ao atualizar c√≥digo (continuando com vers√£o local)"
fi

# 2. Build da imagem localmente
echo "üî® Construindo imagem Docker localmente..."
if docker build -t ghcr.io/gustsr/oncabito-gaming-bot:latest . ; then
    print_status "Imagem constru√≠da localmente"
else
    print_error "Falha ao construir imagem"
    exit 1
fi

# 3. Parar container atual
echo "‚èπÔ∏è  Parando container atual..."
if docker-compose down; then
    print_status "Container parado"
else
    print_warning "Container j√° estava parado ou erro ao parar"
fi

# 4. Criar diret√≥rios necess√°rios
echo "üìÅ Criando diret√≥rios necess√°rios..."
mkdir -p data/database logs backups
print_status "Diret√≥rios criados"

# 5. Verificar .env
echo "‚öôÔ∏è  Verificando configura√ß√£o..."
if [ ! -f ".env" ]; then
    print_error ".env n√£o encontrado. Copie de .env.example e configure."
    exit 1
fi

# Verificar vari√°veis essenciais
if ! grep -q "TELEGRAM_TOKEN=" .env; then
    print_error ".env incompleto. TELEGRAM_TOKEN √© obrigat√≥rio."
    exit 1
fi

# Verificar se HubSoft est√° habilitado e configurado
if grep -q "HUBSOFT_ENABLED=true" .env || grep -q "HUBSOFT_ENABLED=\"true\"" .env; then
    if ! grep -q "HUBSOFT_HOST=" .env || ! grep -q "HUBSOFT_CLIENT_ID=" .env; then
        print_warning "HubSoft habilitado mas configura√ß√£o incompleta. Bot funcionar√° em modo local."
    else
        print_status "Integra√ß√£o HubSoft configurada"
    fi
else
    print_status "HubSoft desabilitado - modo apenas local"
fi

print_status "Configura√ß√£o verificada"

# 6. Subir nova vers√£o
echo "üÜô Subindo nova vers√£o..."
if docker-compose up -d; then
    print_status "Nova vers√£o em execu√ß√£o"
else
    print_error "Falha ao subir nova vers√£o"
    exit 1
fi

# 7. Aguardar inicializa√ß√£o
echo "‚è≥ Aguardando inicializa√ß√£o..."
sleep 10

# 8. Verificar sa√∫de
echo "üè• Verificando sa√∫de do sistema..."
if docker-compose ps | grep -q "healthy"; then
    print_status "Sistema saud√°vel"
elif docker-compose ps | grep -q "Up"; then
    print_warning "Sistema rodando (aguarde health check)"
else
    print_error "Sistema com problemas"
    echo "üìã Logs recentes:"
    docker-compose logs --tail 20
    exit 1
fi

# 9. Mostrar status final
echo ""
echo "üìä Status Final:"
docker-compose ps

echo ""
echo "üìã Logs recentes:"
docker-compose logs --tail 10

echo ""
print_status "Deploy conclu√≠do com sucesso! üéâ"
echo ""
echo "üîß Comandos √∫teis:"
echo "  ‚Ä¢ Ver logs: docker-compose logs -f"
echo "  ‚Ä¢ Status: docker-compose ps"
echo "  ‚Ä¢ Parar: docker-compose down"
echo "  ‚Ä¢ Restart: docker-compose restart"